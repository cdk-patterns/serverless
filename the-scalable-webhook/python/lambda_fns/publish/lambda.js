"use strict";
var AWS = require('aws-sdk');
exports.handler = async function (event) {
    console.log("request:", JSON.stringify(event, undefined, 2));
    // Create an SQS service object
    var sqs = new AWS.SQS({ apiVersion: '2012-11-05' });
    var params = {
        DelaySeconds: 10,
        MessageAttributes: {
            MessageDeduplicationId: {
                DataType: "String",
                StringValue: event.path + new Date().getTime()
            }
        },
        MessageBody: "hello from " + event.path,
        QueueUrl: process.env.queueURL,
    };
    let response;
    await sqs.sendMessage(params, function (err, data) {
        if (err) {
            console.log("Error", err);
            response = sendRes(500, err);
        }
        else {
            console.log("Success", data.MessageId);
            response = sendRes(200, 'You have added a message to the queue! Message ID is ' + data.MessageId);
        }
    }).promise();
    // return response back to upstream caller
    return response;
};
let sendRes = (status, body) => {
    var response = {
        statusCode: status,
        headers: {
            "Content-Type": "text/html"
        },
        body: body
    };
    return response;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFtYmRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibGFtYmRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFN0IsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLFdBQVUsS0FBUztJQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU3RCwrQkFBK0I7SUFDL0IsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUMsVUFBVSxFQUFFLFlBQVksRUFBQyxDQUFDLENBQUM7SUFFbEQsSUFBSSxNQUFNLEdBQUc7UUFDWCxZQUFZLEVBQUUsRUFBRTtRQUNoQixpQkFBaUIsRUFBRTtZQUNqQixzQkFBc0IsRUFBRTtnQkFDdEIsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLFdBQVcsRUFBRSxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFO2FBQy9DO1NBQ0Y7UUFDRCxXQUFXLEVBQUUsYUFBYSxHQUFDLEtBQUssQ0FBQyxJQUFJO1FBQ3JDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVE7S0FDL0IsQ0FBQztJQUVGLElBQUksUUFBUSxDQUFDO0lBRWIsTUFBTSxHQUFHLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxVQUFTLEdBQU8sRUFBRSxJQUFRO1FBQ3RELElBQUksR0FBRyxFQUFFO1lBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDMUIsUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7U0FDN0I7YUFBTTtZQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN2QyxRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSx1REFBdUQsR0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7U0FDaEc7SUFDSCxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUViLDBDQUEwQztJQUMxQyxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDLENBQUM7QUFFRixJQUFJLE9BQU8sR0FBRyxDQUFDLE1BQWEsRUFBRSxJQUFXLEVBQUUsRUFBRTtJQUMzQyxJQUFJLFFBQVEsR0FBRztRQUNiLFVBQVUsRUFBRSxNQUFNO1FBQ2xCLE9BQU8sRUFBRTtZQUNQLGNBQWMsRUFBRSxXQUFXO1NBQzVCO1FBQ0QsSUFBSSxFQUFFLElBQUk7S0FDWCxDQUFDO0lBQ0YsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsidmFyIEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTtcclxuXHJcbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIGZ1bmN0aW9uKGV2ZW50OmFueSkge1xyXG4gIGNvbnNvbGUubG9nKFwicmVxdWVzdDpcIiwgSlNPTi5zdHJpbmdpZnkoZXZlbnQsIHVuZGVmaW5lZCwgMikpO1xyXG5cclxuICAvLyBDcmVhdGUgYW4gU1FTIHNlcnZpY2Ugb2JqZWN0XHJcbiAgdmFyIHNxcyA9IG5ldyBBV1MuU1FTKHthcGlWZXJzaW9uOiAnMjAxMi0xMS0wNSd9KTtcclxuXHJcbiAgdmFyIHBhcmFtcyA9IHtcclxuICAgIERlbGF5U2Vjb25kczogMTAsXHJcbiAgICBNZXNzYWdlQXR0cmlidXRlczoge1xyXG4gICAgICBNZXNzYWdlRGVkdXBsaWNhdGlvbklkOiB7XHJcbiAgICAgICAgRGF0YVR5cGU6IFwiU3RyaW5nXCIsXHJcbiAgICAgICAgU3RyaW5nVmFsdWU6IGV2ZW50LnBhdGggKyBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgTWVzc2FnZUJvZHk6IFwiaGVsbG8gZnJvbSBcIitldmVudC5wYXRoLFxyXG4gICAgUXVldWVVcmw6IHByb2Nlc3MuZW52LnF1ZXVlVVJMLFxyXG4gIH07XHJcblxyXG4gIGxldCByZXNwb25zZTtcclxuXHJcbiAgYXdhaXQgc3FzLnNlbmRNZXNzYWdlKHBhcmFtcywgZnVuY3Rpb24oZXJyOmFueSwgZGF0YTphbnkpIHtcclxuICAgIGlmIChlcnIpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJFcnJvclwiLCBlcnIpO1xyXG4gICAgICByZXNwb25zZSA9IHNlbmRSZXMoNTAwLCBlcnIpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIlN1Y2Nlc3NcIiwgZGF0YS5NZXNzYWdlSWQpO1xyXG4gICAgICByZXNwb25zZSA9IHNlbmRSZXMoMjAwLCAnWW91IGhhdmUgYWRkZWQgYSBtZXNzYWdlIHRvIHRoZSBxdWV1ZSEgTWVzc2FnZSBJRCBpcyAnK2RhdGEuTWVzc2FnZUlkKVxyXG4gICAgfVxyXG4gIH0pLnByb21pc2UoKTtcclxuXHJcbiAgLy8gcmV0dXJuIHJlc3BvbnNlIGJhY2sgdG8gdXBzdHJlYW0gY2FsbGVyXHJcbiAgcmV0dXJuIHJlc3BvbnNlO1xyXG59O1xyXG5cclxubGV0IHNlbmRSZXMgPSAoc3RhdHVzOm51bWJlciwgYm9keTpzdHJpbmcpID0+IHtcclxuICB2YXIgcmVzcG9uc2UgPSB7XHJcbiAgICBzdGF0dXNDb2RlOiBzdGF0dXMsXHJcbiAgICBoZWFkZXJzOiB7XHJcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwidGV4dC9odG1sXCJcclxuICAgIH0sXHJcbiAgICBib2R5OiBib2R5XHJcbiAgfTtcclxuICByZXR1cm4gcmVzcG9uc2U7XHJcbn07Il19