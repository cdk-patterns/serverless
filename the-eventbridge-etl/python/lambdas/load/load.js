"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const { DynamoDB } = require('aws-sdk');
const AWS = require('aws-sdk');
AWS.config.region = process.env.AWS_REGION || 'us-east-1';
const eventbridge = new AWS.EventBridge();
exports.handler = async (event) => {
    console.log(JSON.stringify(event, null, 2));
    // Create the DynamoDB service object
    var ddb = new DynamoDB({ apiVersion: '2012-08-10' });
    var params = {
        TableName: process.env.TABLE_NAME,
        Item: {
            'id': { S: event.detail.data.ID },
            'house_number': { S: event.detail.data.HouseNum },
            'street_address': { S: event.detail.data.Street },
            'town': { S: event.detail.data.Town },
            'zip': { S: event.detail.data.Zip }
        }
    };
    // Call DynamoDB to add the item to the table
    let result = await ddb.putItem(params).promise();
    console.log(result);
    // Building our data loaded event for EventBridge
    var eventBridgeParams = {
        Entries: [
            {
                DetailType: 'data-loaded',
                EventBusName: 'default',
                Source: 'cdkpatterns.the-eventbridge-etl',
                Time: new Date(),
                // Main event body
                Detail: JSON.stringify({
                    status: 'success',
                    data: params
                })
            }
        ]
    };
    const ebResult = await eventbridge.putEvents(eventBridgeParams).promise().catch((error) => {
        throw new Error(error);
    });
    console.log(ebResult);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxvYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3hDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUUvQixHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxXQUFXLENBQUE7QUFDekQsTUFBTSxXQUFXLEdBQUcsSUFBSSxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUE7QUFFekMsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBVSxFQUFFLEVBQUU7SUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU1QyxxQ0FBcUM7SUFDckMsSUFBSSxHQUFHLEdBQUcsSUFBSSxRQUFRLENBQUMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUVyRCxJQUFJLE1BQU0sR0FBRztRQUNYLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVU7UUFDakMsSUFBSSxFQUFFO1lBQ0osSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNqQyxjQUFjLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pELGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNqRCxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3JDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7U0FDcEM7S0FDRixDQUFDO0lBRUYsNkNBQTZDO0lBQzdDLElBQUksTUFBTSxHQUFHLE1BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUVqRCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXBCLGlEQUFpRDtJQUNqRCxJQUFJLGlCQUFpQixHQUFHO1FBQ3RCLE9BQU8sRUFBRTtZQUNQO2dCQUNFLFVBQVUsRUFBRSxhQUFhO2dCQUN6QixZQUFZLEVBQUUsU0FBUztnQkFDdkIsTUFBTSxFQUFFLGlDQUFpQztnQkFDekMsSUFBSSxFQUFFLElBQUksSUFBSSxFQUFFO2dCQUNoQixrQkFBa0I7Z0JBQ2xCLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO29CQUNyQixNQUFNLEVBQUUsU0FBUztvQkFDakIsSUFBSSxFQUFFLE1BQU07aUJBQ2IsQ0FBQzthQUNIO1NBQ0Y7S0FDRixDQUFDO0lBRUYsTUFBTSxRQUFRLEdBQUcsTUFBTSxXQUFXLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7UUFDN0YsTUFBTSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QixDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDeEIsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBEeW5hbW9EQiB9ID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuY29uc3QgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuZXhwb3J0IHsgfTtcbkFXUy5jb25maWcucmVnaW9uID0gcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTiB8fCAndXMtZWFzdC0xJ1xuY29uc3QgZXZlbnRicmlkZ2UgPSBuZXcgQVdTLkV2ZW50QnJpZGdlKClcblxuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnkpID0+IHtcbiAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZXZlbnQsIG51bGwsIDIpKTtcblxuICAvLyBDcmVhdGUgdGhlIER5bmFtb0RCIHNlcnZpY2Ugb2JqZWN0XG4gIHZhciBkZGIgPSBuZXcgRHluYW1vREIoeyBhcGlWZXJzaW9uOiAnMjAxMi0wOC0xMCcgfSk7XG5cbiAgdmFyIHBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRBQkxFX05BTUUsXG4gICAgSXRlbToge1xuICAgICAgJ2lkJzogeyBTOiBldmVudC5kZXRhaWwuZGF0YS5JRCB9LFxuICAgICAgJ2hvdXNlX251bWJlcic6IHsgUzogZXZlbnQuZGV0YWlsLmRhdGEuSG91c2VOdW0gfSxcbiAgICAgICdzdHJlZXRfYWRkcmVzcyc6IHsgUzogZXZlbnQuZGV0YWlsLmRhdGEuU3RyZWV0IH0sXG4gICAgICAndG93bic6IHsgUzogZXZlbnQuZGV0YWlsLmRhdGEuVG93biB9LFxuICAgICAgJ3ppcCc6IHsgUzogZXZlbnQuZGV0YWlsLmRhdGEuWmlwIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gQ2FsbCBEeW5hbW9EQiB0byBhZGQgdGhlIGl0ZW0gdG8gdGhlIHRhYmxlXG4gIGxldCByZXN1bHQgPSBhd2FpdCBkZGIucHV0SXRlbShwYXJhbXMpLnByb21pc2UoKTtcblxuICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuXG4gIC8vIEJ1aWxkaW5nIG91ciBkYXRhIGxvYWRlZCBldmVudCBmb3IgRXZlbnRCcmlkZ2VcbiAgdmFyIGV2ZW50QnJpZGdlUGFyYW1zID0ge1xuICAgIEVudHJpZXM6IFtcbiAgICAgIHtcbiAgICAgICAgRGV0YWlsVHlwZTogJ2RhdGEtbG9hZGVkJyxcbiAgICAgICAgRXZlbnRCdXNOYW1lOiAnZGVmYXVsdCcsXG4gICAgICAgIFNvdXJjZTogJ2Nka3BhdHRlcm5zLnRoZS1ldmVudGJyaWRnZS1ldGwnLFxuICAgICAgICBUaW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgICAvLyBNYWluIGV2ZW50IGJvZHlcbiAgICAgICAgRGV0YWlsOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgc3RhdHVzOiAnc3VjY2VzcycsXG4gICAgICAgICAgZGF0YTogcGFyYW1zXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgXVxuICB9O1xuXG4gIGNvbnN0IGViUmVzdWx0ID0gYXdhaXQgZXZlbnRicmlkZ2UucHV0RXZlbnRzKGV2ZW50QnJpZGdlUGFyYW1zKS5wcm9taXNlKCkuY2F0Y2goKGVycm9yOiBhbnkpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICB9KTtcbiAgY29uc29sZS5sb2coZWJSZXN1bHQpO1xufSJdfQ==