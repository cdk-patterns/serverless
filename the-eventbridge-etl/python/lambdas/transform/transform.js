"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
AWS.config.region = process.env.AWS_REGION || 'us-east-1';
const eventbridge = new AWS.EventBridge();
exports.handler = async (event) => {
    console.log(JSON.stringify(event, null, 2));
    const headers = event.detail.headers;
    const data = event.detail.data;
    let headerArray = headers.split(',');
    let dataArray = data.split(',');
    let transformedObject = {};
    for (let index in headerArray) {
        transformedObject[headerArray[index]] = dataArray[index];
    }
    // Building our transform event for EventBridge
    var params = {
        Entries: [
            {
                DetailType: 'transform',
                EventBusName: 'default',
                Source: 'cdkpatterns.the-eventbridge-etl',
                Time: new Date(),
                // Main event body
                Detail: JSON.stringify({
                    status: 'transformed',
                    data: transformedObject
                })
            }
        ]
    };
    const result = await eventbridge.putEvents(params).promise();
    console.log(result);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidHJhbnNmb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBRTlCLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLFdBQVcsQ0FBQTtBQUN6RCxNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtBQUV6QyxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFTLEVBQUUsRUFBRTtJQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTNDLE1BQU0sT0FBTyxHQUFVLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQzVDLE1BQU0sSUFBSSxHQUFVLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBRXRDLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckMsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQyxJQUFJLGlCQUFpQixHQUFPLEVBQUUsQ0FBQztJQUUvQixLQUFJLElBQUksS0FBSyxJQUFJLFdBQVcsRUFBRTtRQUMxQixpQkFBaUIsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDNUQ7SUFFRCwrQ0FBK0M7SUFDL0MsSUFBSSxNQUFNLEdBQUc7UUFDVCxPQUFPLEVBQUU7WUFDUDtnQkFDRSxVQUFVLEVBQUUsV0FBVztnQkFDdkIsWUFBWSxFQUFFLFNBQVM7Z0JBQ3ZCLE1BQU0sRUFBRSxpQ0FBaUM7Z0JBQ3pDLElBQUksRUFBRSxJQUFJLElBQUksRUFBRTtnQkFDaEIsa0JBQWtCO2dCQUNsQixNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztvQkFDckIsTUFBTSxFQUFFLGFBQWE7b0JBQ3JCLElBQUksRUFBRSxpQkFBaUI7aUJBQ3hCLENBQUM7YUFDSDtTQUNGO0tBQ0osQ0FBQztJQUVGLE1BQU0sTUFBTSxHQUFHLE1BQU0sV0FBVyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM3RCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRXhCLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKVxuZXhwb3J0e307XG5BV1MuY29uZmlnLnJlZ2lvbiA9IHByb2Nlc3MuZW52LkFXU19SRUdJT04gfHwgJ3VzLWVhc3QtMSdcbmNvbnN0IGV2ZW50YnJpZGdlID0gbmV3IEFXUy5FdmVudEJyaWRnZSgpXG5cbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIChldmVudDphbnkpID0+IHtcbiAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShldmVudCwgbnVsbCwgMikpXG5cbiAgICBjb25zdCBoZWFkZXJzOnN0cmluZyA9IGV2ZW50LmRldGFpbC5oZWFkZXJzO1xuICAgIGNvbnN0IGRhdGE6c3RyaW5nID0gZXZlbnQuZGV0YWlsLmRhdGE7XG5cbiAgICBsZXQgaGVhZGVyQXJyYXkgPSBoZWFkZXJzLnNwbGl0KCcsJyk7XG4gICAgbGV0IGRhdGFBcnJheSA9IGRhdGEuc3BsaXQoJywnKTtcbiAgICBsZXQgdHJhbnNmb3JtZWRPYmplY3Q6YW55ID0ge307XG5cbiAgICBmb3IobGV0IGluZGV4IGluIGhlYWRlckFycmF5KSB7XG4gICAgICAgIHRyYW5zZm9ybWVkT2JqZWN0W2hlYWRlckFycmF5W2luZGV4XV0gPSBkYXRhQXJyYXlbaW5kZXhdO1xuICAgIH1cblxuICAgIC8vIEJ1aWxkaW5nIG91ciB0cmFuc2Zvcm0gZXZlbnQgZm9yIEV2ZW50QnJpZGdlXG4gICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgRW50cmllczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIERldGFpbFR5cGU6ICd0cmFuc2Zvcm0nLFxuICAgICAgICAgICAgRXZlbnRCdXNOYW1lOiAnZGVmYXVsdCcsXG4gICAgICAgICAgICBTb3VyY2U6ICdjZGtwYXR0ZXJucy50aGUtZXZlbnRicmlkZ2UtZXRsJyxcbiAgICAgICAgICAgIFRpbWU6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAvLyBNYWluIGV2ZW50IGJvZHlcbiAgICAgICAgICAgIERldGFpbDogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICBzdGF0dXM6ICd0cmFuc2Zvcm1lZCcsXG4gICAgICAgICAgICAgIGRhdGE6IHRyYW5zZm9ybWVkT2JqZWN0XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH07XG4gICAgXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXZlbnRicmlkZ2UucHV0RXZlbnRzKHBhcmFtcykucHJvbWlzZSgpO1xuICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG5cbn0iXX0=