import { Test } from 'nodeunit';
declare const _default: {
    'Listener guesses protocol from port'(test: Test): void;
    'Listener guesses port from protocol'(test: Test): void;
    'Listener default to open'(test: Test): void;
    'HTTPS listener requires certificate'(test: Test): void;
    'HTTPS listener can add certificate after construction'(test: Test): void;
    'Can configure targetType on TargetGroups'(test: Test): void;
    'Can configure name on TargetGroups'(test: Test): void;
    'Can add target groups with and without conditions'(test: Test): void;
    'Can implicitly create target groups with and without conditions'(test: Test): void;
    'Add certificate to constructed listener'(test: Test): void;
    'Add certificate to imported listener'(test: Test): void;
    'Enable stickiness for targets'(test: Test): void;
    'Enable health check for targets'(test: Test): void;
    'validation error if invalid health check protocol'(test: Test): void;
    'Can call addTargetGroups on imported listener'(test: Test): void;
    'Can depend on eventual listener via TargetGroup'(test: Test): void;
    'Exercise metrics'(test: Test): void;
    'Can add dependency on ListenerRule via TargetGroup'(test: Test): void;
    'Can add fixed responses'(test: Test): void;
    'Can add redirect responses'(test: Test): void;
    'Can configure deregistration_delay for targets'(test: Test): void;
    'Throws with bad fixed responses': {
        'status code'(test: Test): void;
        'message body'(test: Test): void;
    };
    'Throws with bad redirect responses': {
        'status code'(test: Test): void;
        'protocol'(test: Test): void;
    };
    'Throws when specifying both target groups and fixed reponse'(test: Test): void;
    'Throws when specifying both target groups and redirect reponse'(test: Test): void;
    'Imported listener with imported security group and allowAllOutbound set to false'(test: Test): void;
    'Can pass multiple certificate arns to application listener constructor'(test: Test): void;
    'Can use certificate wrapper class'(test: Test): void;
    'Can add additional certificates via addCertficateArns to application listener'(test: Test): void;
};
export = _default;
