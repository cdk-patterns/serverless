import { Test } from 'nodeunit';
declare const _default: {
    'default rule'(test: Test): void;
    'can get rule name'(test: Test): void;
    'rule with physical name'(test: Test): void;
    'eventPattern is rendered properly'(test: Test): void;
    'fails synthesis if neither eventPattern nor scheudleExpression are specified'(test: Test): void;
    'addEventPattern can be used to add filters'(test: Test): void;
    'targets can be added via props or addTarget with input transformer'(test: Test): void;
    'input template can contain tokens'(test: Test): void;
    'target can declare role which will be used'(test: Test): void;
    'asEventRuleTarget can use the ruleArn and a uniqueId of the rule'(test: Test): void;
    'fromEventRuleArn'(test: Test): void;
    'rule can be disabled'(test: Test): void;
    'can add multiple targets with the same id'(test: Test): void;
    'rule and target must be in the same region'(test: Test): void;
    'sqsParameters are generated when they are specified in target props'(test: Test): void;
    'associate rule with event bus'(test: Test): void;
    'throws with eventBus and schedule'(test: Test): void;
    'for cross-account targets': {
        'requires that the source stack specify a concrete account'(test: Test): void;
        'requires that the target stack specify a concrete account'(test: Test): void;
        'requires that the target stack specify a concrete region'(test: Test): void;
        'requires that the source stack be part of an App'(test: Test): void;
        'requires that the target stack be part of an App'(test: Test): void;
        'requires that the source and target stacks be part of the same App'(test: Test): void;
        'generates the correct rules in the source and target stacks when eventPattern is passed in the constructor'(test: Test): void;
        'generates the correct rule in the target stack when addEventPattern in the source rule is used'(test: Test): void;
    };
};
export = _default;
