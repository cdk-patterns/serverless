"use strict";
const assert_1 = require("@aws-cdk/assert");
const iam = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
module.exports = {
    'default event bus'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.EventBus(stack, 'Bus');
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Events::EventBus', {
            Name: 'Bus'
        }));
        test.done();
    },
    'named event bus'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.EventBus(stack, 'Bus', {
            eventBusName: 'myEventBus'
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Events::EventBus', {
            Name: 'myEventBus'
        }));
        test.done();
    },
    'partner event bus'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.EventBus(stack, 'Bus', {
            eventSourceName: 'aws.partner/PartnerName/acct1/repo1'
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Events::EventBus', {
            Name: 'aws.partner/PartnerName/acct1/repo1',
            EventSourceName: 'aws.partner/PartnerName/acct1/repo1'
        }));
        test.done();
    },
    'can get bus name'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        const bus = new lib_1.EventBus(stack, 'Bus', {
            eventBusName: 'myEventBus'
        });
        // WHEN
        new core_1.CfnResource(stack, 'Res', {
            type: 'Test::Resource',
            properties: {
                EventBusName: bus.eventBusName
            }
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('Test::Resource', {
            EventBusName: { Ref: 'BusEA82B648' }
        }));
        test.done();
    },
    'can get bus arn'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        const bus = new lib_1.EventBus(stack, 'Bus', {
            eventBusName: 'myEventBus'
        });
        // WHEN
        new core_1.CfnResource(stack, 'Res', {
            type: 'Test::Resource',
            properties: {
                EventBusArn: bus.eventBusArn
            }
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('Test::Resource', {
            EventBusArn: { 'Fn::GetAtt': ['BusEA82B648', 'Arn'] }
        }));
        test.done();
    },
    'event bus name cannot be default'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const createInvalidBus = () => new lib_1.EventBus(stack, 'Bus', {
            eventBusName: 'default'
        });
        // THEN
        test.throws(() => {
            createInvalidBus();
        }, /'eventBusName' must not be 'default'/);
        test.done();
    },
    'event bus name cannot contain slash'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const createInvalidBus = () => new lib_1.EventBus(stack, 'Bus', {
            eventBusName: 'my/bus'
        });
        // THEN
        test.throws(() => {
            createInvalidBus();
        }, /'eventBusName' must not contain '\/'/);
        test.done();
    },
    'event bus cannot have name and source name'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const createInvalidBus = () => new lib_1.EventBus(stack, 'Bus', {
            eventBusName: 'myBus',
            eventSourceName: 'myBus'
        });
        // THEN
        test.throws(() => {
            createInvalidBus();
        }, /'eventBusName' and 'eventSourceName' cannot both be provided/);
        test.done();
    },
    'event bus name cannot be empty string'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const createInvalidBus = () => new lib_1.EventBus(stack, 'Bus', {
            eventBusName: ''
        });
        // THEN
        test.throws(() => {
            createInvalidBus();
        }, /'eventBusName' must satisfy: /);
        test.done();
    },
    'event bus source name must follow pattern'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const createInvalidBus = () => new lib_1.EventBus(stack, 'Bus', {
            eventSourceName: 'invalid-partner'
        });
        // THEN
        test.throws(() => {
            createInvalidBus();
        }, /'eventSourceName' must satisfy: \/\^aws/);
        test.done();
    },
    'event bus source name cannot be empty string'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const createInvalidBus = () => new lib_1.EventBus(stack, 'Bus', {
            eventSourceName: ''
        });
        // THEN
        test.throws(() => {
            createInvalidBus();
        }, /'eventSourceName' must satisfy: /);
        test.done();
    },
    'can grant PutEvents'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        const role = new iam.Role(stack, 'Role', {
            assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com')
        });
        // WHEN
        lib_1.EventBus.grantPutEvents(role);
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: 'events:PutEvents',
                        Effect: 'Allow',
                        Resource: '*'
                    }
                ],
                Version: '2012-10-17'
            },
            Roles: [
                {
                    Ref: 'Role1ABCC5F0'
                }
            ]
        }));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,