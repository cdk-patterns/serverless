"use strict";
const assert_1 = require("@aws-cdk/assert");
const aws_iam_1 = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/core");
const lib_1 = require("../lib");
const rule_1 = require("../lib/rule");
class SomeTarget {
    constructor(input) {
        this.input = input;
    }
    bind() {
        return { id: 'T1', arn: 'ARN1', input: this.input };
    }
}
module.exports = {
    'json template': {
        'can just be a JSON object'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const rule = new rule_1.Rule(stack, 'Rule', {
                schedule: lib_1.Schedule.rate(cdk.Duration.minutes(1)),
            });
            // WHEN
            rule.addTarget(new SomeTarget(lib_1.RuleTargetInput.fromObject({ SomeObject: 'withAValue' })));
            // THEN
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Events::Rule', {
                Targets: [
                    {
                        Input: "{\"SomeObject\":\"withAValue\"}"
                    }
                ]
            }));
            test.done();
        },
        'can use joined JSON containing refs in JSON object'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const rule = new rule_1.Rule(stack, 'Rule', {
                schedule: lib_1.Schedule.rate(cdk.Duration.minutes(1)),
            });
            // WHEN
            rule.addTarget(new SomeTarget(lib_1.RuleTargetInput.fromObject({
                data: lib_1.EventField.fromPath('$'),
                stackName: cdk.Aws.STACK_NAME,
            })));
            // THEN
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Events::Rule', {
                Targets: [
                    {
                        InputTransformer: {
                            InputPathsMap: {
                                f1: '$'
                            },
                            InputTemplate: {
                                'Fn::Join': [
                                    '',
                                    [
                                        '{"data":<f1>,"stackName":"',
                                        { Ref: 'AWS::StackName' },
                                        '"}'
                                    ]
                                ]
                            },
                        }
                    }
                ]
            }));
            test.done();
        },
        'can use token'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const rule = new rule_1.Rule(stack, 'Rule', {
                schedule: lib_1.Schedule.rate(cdk.Duration.minutes(1)),
            });
            const user = new aws_iam_1.User(stack, 'User');
            // WHEN
            rule.addTarget(new SomeTarget(lib_1.RuleTargetInput.fromObject({ userArn: user.userArn })));
            // THEN
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Events::Rule', {
                Targets: [
                    {
                        Input: {
                            'Fn::Join': [
                                '',
                                [
                                    '{\"userArn\":\"',
                                    {
                                        'Fn::GetAtt': [
                                            'User00B015A1',
                                            'Arn'
                                        ]
                                    },
                                    '\"}'
                                ]
                            ]
                        }
                    }
                ]
            }));
            test.done();
        },
    },
    'text templates': {
        'strings with newlines are serialized to a newline-delimited list of JSON strings'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const rule = new rule_1.Rule(stack, 'Rule', {
                schedule: lib_1.Schedule.rate(cdk.Duration.minutes(1)),
            });
            // WHEN
            rule.addTarget(new SomeTarget(lib_1.RuleTargetInput.fromMultilineText('I have\nmultiple lines')));
            // THEN
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Events::Rule', {
                Targets: [
                    {
                        Input: "\"I have\"\n\"multiple lines\""
                    }
                ]
            }));
            test.done();
        },
        'escaped newlines are not interpreted as newlines'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const rule = new rule_1.Rule(stack, 'Rule', {
                schedule: lib_1.Schedule.rate(cdk.Duration.minutes(1)),
            });
            // WHEN
            rule.addTarget(new SomeTarget(lib_1.RuleTargetInput.fromMultilineText('this is not\\na real newline'))),
                // THEN
                assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Events::Rule', {
                    Targets: [
                        {
                            Input: "\"this is not\\\\na real newline\""
                        }
                    ]
                }));
            test.done();
        },
        'can use Tokens in text templates'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const rule = new rule_1.Rule(stack, 'Rule', {
                schedule: lib_1.Schedule.rate(cdk.Duration.minutes(1)),
            });
            const world = cdk.Lazy.stringValue({ produce: () => 'world' });
            // WHEN
            rule.addTarget(new SomeTarget(lib_1.RuleTargetInput.fromText(`hello ${world}`)));
            // THEN
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Events::Rule', {
                Targets: [
                    {
                        Input: "\"hello world\""
                    }
                ]
            }));
            test.done();
        }
    },
};
//# sourceMappingURL=data:application/json;base64,