"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_entities_1 = require("../build-tools/aws-entities");
const lib_1 = require("../lib");
describe('find', () => {
    test('returns undefined for an unknown fact', () => {
        expect(lib_1.Fact.find(aws_entities_1.AWS_REGIONS[0], 'not:a:known:fact')).toBe(undefined);
    });
    test('returns undefined for an unknown region', () => {
        expect(lib_1.Fact.find('bermuda-triangle-42', lib_1.FactName.PARTITION)).toBe(undefined);
    });
});
describe('requireFact', () => {
    test('throws error for an unknown fact', () => {
        expect(() => lib_1.Fact.requireFact(aws_entities_1.AWS_REGIONS[0], 'not:a:known:fact')).toThrowError();
    });
    test('throws error for an unknown region', () => {
        expect(() => lib_1.Fact.requireFact('bermuda-triangle-42', lib_1.FactName.PARTITION)).toThrowError();
    });
});
describe('register', () => {
    test('allows registering an arbitrary fact', () => {
        // GIVEN
        const region = aws_entities_1.AWS_REGIONS[0];
        const name = 'my:custom:fact';
        const value = '1337';
        // WHEN
        expect(lib_1.Fact.find(region, name)).toBe(undefined);
        expect(() => lib_1.Fact.register({ region, name, value })).not.toThrowError();
        // THEN
        expect(lib_1.Fact.find(region, name)).toBe(value);
        // Cleanup
        lib_1.Fact.unregister(region, name);
    });
    test('allows re-registering a fact with the same value', () => {
        // GIVEN
        const region = aws_entities_1.AWS_REGIONS[0];
        const name = 'my:custom:fact';
        const value = '1337';
        // WHEN
        expect(lib_1.Fact.find(region, name)).toBe(undefined);
        expect(() => lib_1.Fact.register({ region, name, value })).not.toThrowError();
        // THEN
        expect(() => lib_1.Fact.register({ region, name, value })).not.toThrowError();
        expect(lib_1.Fact.find(region, name)).toBe(value);
        // Cleanup
        lib_1.Fact.unregister(region, name);
    });
    test('disallows re-registering a fact with a different value', () => {
        // GIVEN
        const region = aws_entities_1.AWS_REGIONS[0];
        const name = lib_1.FactName.PARTITION;
        const value = '1337';
        // WHEN
        expect(lib_1.Fact.find(region, name)).not.toBe(value);
        // THEN
        expect(() => lib_1.Fact.register({ region, name, value }))
            .toThrowError(/already has a fact/);
    });
    test('allows overriding an arbitrary fact', () => {
        // GIVEN
        const region = aws_entities_1.AWS_REGIONS[0];
        const name = 'my:custom:fact';
        const value = '1337';
        // WHEN
        expect(lib_1.Fact.find(region, name)).toBe(undefined);
        expect(() => lib_1.Fact.register({ region, name, value })).not.toThrowError();
        expect(lib_1.Fact.find(region, name)).toBe(value);
        // THEN
        expect(() => lib_1.Fact.register({ region, name, value: 'Foo' }, true)).not.toThrowError();
        expect(lib_1.Fact.find(region, name)).toBe('Foo');
        // Cleanup
        lib_1.Fact.unregister(region, name);
    });
});
//# sourceMappingURL=data:application/json;base64,