"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
const region = 'bermuda-triangle-42';
const urlSuffix = '.nowhere.null';
describe('servicePrincipal', () => {
    for (const suffix of ['', '.amazonaws.com', '.amazonaws.com.cn']) {
        for (const service of ['states']) {
            test(`${service}${suffix}`, () => {
                expect(lib_1.Default.servicePrincipal(`${service}${suffix}`, region, urlSuffix)).toBe(`${service}.${region}.amazonaws.com`);
            });
        }
        for (const service of ['codedeploy', 'logs']) {
            test(`${service}${suffix}`, () => {
                expect(lib_1.Default.servicePrincipal(`${service}${suffix}`, region, urlSuffix)).toBe(`${service}.${region}.${urlSuffix}`);
            });
        }
        for (const service of ['ec2']) {
            test(`${service}${suffix}`, () => {
                expect(lib_1.Default.servicePrincipal(`${service}${suffix}`, region, urlSuffix)).toBe(`${service}.${urlSuffix}`);
            });
        }
        for (const service of ['autoscaling', 'lambda', 'events', 'sns', 'sqs', 'foo-service']) {
            test(`${service}${suffix}`, () => {
                expect(lib_1.Default.servicePrincipal(`${service}${suffix}`, region, urlSuffix)).toBe(`${service}.amazonaws.com`);
            });
        }
    }
    test('with an "exotic" DNS suffix (.local)', () => {
        expect(lib_1.Default.servicePrincipal('foo-service.local', region, urlSuffix)).toBe('foo-service.local');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVmYXVsdC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsZ0NBQWlDO0FBRWpDLE1BQU0sTUFBTSxHQUFHLHFCQUFxQixDQUFDO0FBQ3JDLE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQztBQUVsQyxRQUFRLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO0lBQ2hDLEtBQUssTUFBTSxNQUFNLElBQUksQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsbUJBQW1CLENBQUMsRUFBRTtRQUNoRSxLQUFLLE1BQU0sT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLEdBQUcsT0FBTyxHQUFHLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLGFBQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLE9BQU8sR0FBRyxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLElBQUksTUFBTSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3hILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxLQUFLLE1BQU0sT0FBTyxJQUFJLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQzVDLElBQUksQ0FBQyxHQUFHLE9BQU8sR0FBRyxNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUU7Z0JBQy9CLE1BQU0sQ0FBQyxhQUFPLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxPQUFPLEdBQUcsTUFBTSxFQUFFLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxJQUFJLE1BQU0sSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxLQUFLLE1BQU0sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDN0IsSUFBSSxDQUFDLEdBQUcsT0FBTyxHQUFHLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLGFBQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLE9BQU8sR0FBRyxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQztZQUM3RyxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsS0FBSyxNQUFNLE9BQU8sSUFBSSxDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLEVBQUU7WUFDdEYsSUFBSSxDQUFDLEdBQUcsT0FBTyxHQUFHLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLGFBQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLE9BQU8sR0FBRyxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLGdCQUFnQixDQUFDLENBQUM7WUFDOUcsQ0FBQyxDQUFDLENBQUM7U0FDSjtLQUVGO0lBRUQsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLEdBQUcsRUFBRTtRQUNoRCxNQUFNLENBQUMsYUFBTyxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3JHLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWZhdWx0IH0gZnJvbSAnLi4vbGliJztcblxuY29uc3QgcmVnaW9uID0gJ2Jlcm11ZGEtdHJpYW5nbGUtNDInO1xuY29uc3QgdXJsU3VmZml4ID0gJy5ub3doZXJlLm51bGwnO1xuXG5kZXNjcmliZSgnc2VydmljZVByaW5jaXBhbCcsICgpID0+IHtcbiAgZm9yIChjb25zdCBzdWZmaXggb2YgWycnLCAnLmFtYXpvbmF3cy5jb20nLCAnLmFtYXpvbmF3cy5jb20uY24nXSkge1xuICAgIGZvciAoY29uc3Qgc2VydmljZSBvZiBbJ3N0YXRlcyddKSB7XG4gICAgICB0ZXN0KGAke3NlcnZpY2V9JHtzdWZmaXh9YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3QoRGVmYXVsdC5zZXJ2aWNlUHJpbmNpcGFsKGAke3NlcnZpY2V9JHtzdWZmaXh9YCwgcmVnaW9uLCB1cmxTdWZmaXgpKS50b0JlKGAke3NlcnZpY2V9LiR7cmVnaW9ufS5hbWF6b25hd3MuY29tYCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBzZXJ2aWNlIG9mIFsnY29kZWRlcGxveScsICdsb2dzJ10pIHtcbiAgICAgIHRlc3QoYCR7c2VydmljZX0ke3N1ZmZpeH1gLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChEZWZhdWx0LnNlcnZpY2VQcmluY2lwYWwoYCR7c2VydmljZX0ke3N1ZmZpeH1gLCByZWdpb24sIHVybFN1ZmZpeCkpLnRvQmUoYCR7c2VydmljZX0uJHtyZWdpb259LiR7dXJsU3VmZml4fWApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBzZXJ2aWNlIG9mIFsnZWMyJ10pIHtcbiAgICAgIHRlc3QoYCR7c2VydmljZX0ke3N1ZmZpeH1gLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChEZWZhdWx0LnNlcnZpY2VQcmluY2lwYWwoYCR7c2VydmljZX0ke3N1ZmZpeH1gLCByZWdpb24sIHVybFN1ZmZpeCkpLnRvQmUoYCR7c2VydmljZX0uJHt1cmxTdWZmaXh9YCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHNlcnZpY2Ugb2YgWydhdXRvc2NhbGluZycsICdsYW1iZGEnLCAnZXZlbnRzJywgJ3NucycsICdzcXMnLCAnZm9vLXNlcnZpY2UnXSkge1xuICAgICAgdGVzdChgJHtzZXJ2aWNlfSR7c3VmZml4fWAsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KERlZmF1bHQuc2VydmljZVByaW5jaXBhbChgJHtzZXJ2aWNlfSR7c3VmZml4fWAsIHJlZ2lvbiwgdXJsU3VmZml4KSkudG9CZShgJHtzZXJ2aWNlfS5hbWF6b25hd3MuY29tYCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgfVxuXG4gIHRlc3QoJ3dpdGggYW4gXCJleG90aWNcIiBETlMgc3VmZml4ICgubG9jYWwpJywgKCkgPT4ge1xuICAgIGV4cGVjdChEZWZhdWx0LnNlcnZpY2VQcmluY2lwYWwoJ2Zvby1zZXJ2aWNlLmxvY2FsJywgcmVnaW9uLCB1cmxTdWZmaXgpKS50b0JlKCdmb28tc2VydmljZS5sb2NhbCcpO1xuICB9KTtcbn0pO1xuIl19