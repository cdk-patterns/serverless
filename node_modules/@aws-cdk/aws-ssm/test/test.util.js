"use strict";
// tslint:disable: max-line-length
const core_1 = require("@aws-cdk/core");
const util_1 = require("../lib/util");
module.exports = {
    arnForParameterName: {
        'simple names': {
            'concrete parameterName and no physical name (sep is "/")'(test) {
                const stack = new core_1.Stack();
                test.deepEqual(stack.resolve(util_1.arnForParameterName(stack, 'myParam', undefined)), {
                    'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':ssm:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':parameter/myParam']]
                });
                test.done();
            },
            'token parameterName and concrete physical name (no additional "/")'(test) {
                const stack = new core_1.Stack();
                test.deepEqual(stack.resolve(util_1.arnForParameterName(stack, core_1.Token.asString({ Ref: 'Boom' }), { physicalName: 'myParam' })), {
                    'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':ssm:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':parameter/', { Ref: 'Boom' }]]
                });
                test.done();
            },
            'token parameterName, explicit "/" separator'(test) {
                const stack = new core_1.Stack();
                test.deepEqual(stack.resolve(util_1.arnForParameterName(stack, core_1.Token.asString({ Ref: 'Boom' }), { simpleName: true })), {
                    'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':ssm:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':parameter/', { Ref: 'Boom' }]]
                });
                test.done();
            }
        },
        'path names': {
            'concrete parameterName and no physical name (sep is "/")'(test) {
                const stack = new core_1.Stack();
                test.deepEqual(stack.resolve(util_1.arnForParameterName(stack, '/foo/bar', undefined)), {
                    'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':ssm:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':parameter/foo/bar']]
                });
                test.done();
            },
            'token parameterName and concrete physical name (no sep)'(test) {
                const stack = new core_1.Stack();
                test.deepEqual(stack.resolve(util_1.arnForParameterName(stack, core_1.Token.asString({ Ref: 'Boom' }), { physicalName: '/foo/bar' })), {
                    'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':ssm:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':parameter', { Ref: 'Boom' }]]
                });
                test.done();
            },
            'token parameterName, explicit "" separator'(test) {
                const stack = new core_1.Stack();
                test.deepEqual(stack.resolve(util_1.arnForParameterName(stack, core_1.Token.asString({ Ref: 'Boom' }), { simpleName: false })), {
                    'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':ssm:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':parameter', { Ref: 'Boom' }]]
                });
                test.done();
            }
        },
        'fails if explicit separator is not defined and parameterName is a token'(test) {
            const stack = new core_1.Stack();
            test.throws(() => util_1.arnForParameterName(stack, core_1.Token.asString({ Ref: 'Boom' })), /Unable to determine ARN separator for SSM parameter since the parameter name is an unresolved token. Use "fromAttributes" and specify "simpleName" explicitly/);
            test.done();
        }
    }
};
//# sourceMappingURL=data:application/json;base64,