"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("./util");
class Cors {
    // utility class
    constructor() {
    }
}
exports.Cors = Cors;
/**
 * All HTTP methods.
 */
Cors.ALL_METHODS = util_1.ALL_METHODS;
/**
 * All origins.
 */
Cors.ALL_ORIGINS = ['*'];
/**
 * The set of default headers allowed for CORS and useful for API Gateway.
 */
Cors.DEFAULT_HEADERS = ['Content-Type', 'X-Amz-Date', 'Authorization', 'X-Api-Key', 'X-Amz-Security-Token', 'X-Amz-User-Agent'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxpQ0FBcUM7QUFnR3JDLE1BQWEsSUFBSTtJQWdCZixnQkFBZ0I7SUFDaEI7SUFBd0IsQ0FBQzs7QUFqQjNCLG9CQWtCQztBQWpCQzs7R0FFRztBQUNvQixnQkFBVyxHQUFHLGtCQUFXLENBQUM7QUFFakQ7O0dBRUc7QUFDb0IsZ0JBQVcsR0FBRyxDQUFFLEdBQUcsQ0FBRSxDQUFDO0FBRTdDOztHQUVHO0FBQ29CLG9CQUFlLEdBQUcsQ0FBRSxjQUFjLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsc0JBQXNCLEVBQUUsa0JBQWtCLENBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBBTExfTUVUSE9EUyB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29yc09wdGlvbnMge1xuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSByZXNwb25zZSBzdGF0dXMgY29kZSByZXR1cm5lZCBmcm9tIHRoZSBPUFRJT05TIG1ldGhvZC5cbiAgICpcbiAgICogQGRlZmF1bHQgMjA0XG4gICAqL1xuICByZWFkb25seSBzdGF0dXNDb2RlPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGxpc3Qgb2Ygb3JpZ2lucyB0aGF0IGFyZSBhbGxvd2VkIHRvIG1ha2UgcmVxdWVzdHMgdG8gdGhpc1xuICAgKiByZXNvdXJjZS4gSWYgeW91IHdpc2ggdG8gYWxsb3cgYWxsIG9yaWdpbnMsIHNwZWNpZnkgYENvcnMuQUxMX09SSUdJTlNgIG9yXG4gICAqIGBbICogXWAuXG4gICAqXG4gICAqIFJlc3BvbnNlcyB3aWxsIGluY2x1ZGUgdGhlIGBBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5gIHJlc3BvbnNlIGhlYWRlci5cbiAgICogSWYgYENvcnMuQUxMX09SSUdJTlNgIGlzIHNwZWNpZmllZCwgdGhlIGBWYXJ5OiBPcmlnaW5gIHJlc3BvbnNlIGhlYWRlciB3aWxsXG4gICAqIGFsc28gYmUgaW5jbHVkZWQuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblxuICAgKi9cbiAgcmVhZG9ubHkgYWxsb3dPcmlnaW5zOiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogVGhlIEFjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnMgcmVzcG9uc2UgaGVhZGVyIGlzIHVzZWQgaW4gcmVzcG9uc2UgdG8gYVxuICAgKiBwcmVmbGlnaHQgcmVxdWVzdCB3aGljaCBpbmNsdWRlcyB0aGUgQWNjZXNzLUNvbnRyb2wtUmVxdWVzdC1IZWFkZXJzIHRvXG4gICAqIGluZGljYXRlIHdoaWNoIEhUVFAgaGVhZGVycyBjYW4gYmUgdXNlZCBkdXJpbmcgdGhlIGFjdHVhbCByZXF1ZXN0LlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9BY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXG4gICAqIEBkZWZhdWx0IENvcnMuREVGQVVMVF9IRUFERVJTXG4gICAqL1xuICByZWFkb25seSBhbGxvd0hlYWRlcnM/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogVGhlIEFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHMgcmVzcG9uc2UgaGVhZGVyIHNwZWNpZmllcyB0aGUgbWV0aG9kIG9yXG4gICAqIG1ldGhvZHMgYWxsb3dlZCB3aGVuIGFjY2Vzc2luZyB0aGUgcmVzb3VyY2UgaW4gcmVzcG9uc2UgdG8gYSBwcmVmbGlnaHQgcmVxdWVzdC5cbiAgICpcbiAgICogSWYgYEFOWWAgaXMgc3BlY2lmaWVkLCBpdCB3aWxsIGJlIGV4cGFuZGVkIHRvIGBDb3JzLkFMTF9NRVRIT0RTYC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kc1xuICAgKiBAZGVmYXVsdCBDb3JzLkFMTF9NRVRIT0RTXG4gICAqL1xuICByZWFkb25seSBhbGxvd01ldGhvZHM/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogVGhlIEFjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzIHJlc3BvbnNlIGhlYWRlciB0ZWxscyBicm93c2VycyB3aGV0aGVyXG4gICAqIHRvIGV4cG9zZSB0aGUgcmVzcG9uc2UgdG8gZnJvbnRlbmQgSmF2YVNjcmlwdCBjb2RlIHdoZW4gdGhlIHJlcXVlc3Qnc1xuICAgKiBjcmVkZW50aWFscyBtb2RlIChSZXF1ZXN0LmNyZWRlbnRpYWxzKSBpcyBcImluY2x1ZGVcIi5cbiAgICpcbiAgICogV2hlbiBhIHJlcXVlc3QncyBjcmVkZW50aWFscyBtb2RlIChSZXF1ZXN0LmNyZWRlbnRpYWxzKSBpcyBcImluY2x1ZGVcIixcbiAgICogYnJvd3NlcnMgd2lsbCBvbmx5IGV4cG9zZSB0aGUgcmVzcG9uc2UgdG8gZnJvbnRlbmQgSmF2YVNjcmlwdCBjb2RlIGlmIHRoZVxuICAgKiBBY2Nlc3MtQ29udHJvbC1BbGxvdy1DcmVkZW50aWFscyB2YWx1ZSBpcyB0cnVlLlxuICAgKlxuICAgKiBDcmVkZW50aWFscyBhcmUgY29va2llcywgYXV0aG9yaXphdGlvbiBoZWFkZXJzIG9yIFRMUyBjbGllbnQgY2VydGlmaWNhdGVzLlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9BY2Nlc3MtQ29udHJvbC1BbGxvdy1DcmVkZW50aWFsc1xuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgYWxsb3dDcmVkZW50aWFscz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBBY2Nlc3MtQ29udHJvbC1NYXgtQWdlIHJlc3BvbnNlIGhlYWRlciBpbmRpY2F0ZXMgaG93IGxvbmcgdGhlIHJlc3VsdHMgb2ZcbiAgICogYSBwcmVmbGlnaHQgcmVxdWVzdCAodGhhdCBpcyB0aGUgaW5mb3JtYXRpb24gY29udGFpbmVkIGluIHRoZVxuICAgKiBBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzIGFuZCBBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzIGhlYWRlcnMpXG4gICAqIGNhbiBiZSBjYWNoZWQuXG4gICAqXG4gICAqIFRvIGRpc2FibGUgY2FjaGluZyBhbHRvZ3RoZXIgdXNlIGBkaXNhYmxlQ2FjaGU6IHRydWVgLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9BY2Nlc3MtQ29udHJvbC1NYXgtQWdlXG4gICAqIEBkZWZhdWx0IC0gYnJvd3Nlci1zcGVjaWZpYyAoc2VlIHJlZmVyZW5jZSlcbiAgICovXG4gIHJlYWRvbmx5IG1heEFnZT86IER1cmF0aW9uO1xuXG4gIC8qKlxuICAgKiBTZXRzIEFjY2Vzcy1Db250cm9sLU1heC1BZ2UgdG8gLTEsIHdoaWNoIG1lYW5zIHRoYXQgY2FjaGluZyBpcyBkaXNhYmxlZC5cbiAgICogVGhpcyBvcHRpb24gY2Fubm90IGJlIHVzZWQgd2l0aCBgbWF4QWdlYC5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBjYWNoZSBpcyBlbmFibGVkXG4gICAqL1xuICByZWFkb25seSBkaXNhYmxlQ2FjaGU/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgQWNjZXNzLUNvbnRyb2wtRXhwb3NlLUhlYWRlcnMgcmVzcG9uc2UgaGVhZGVyIGluZGljYXRlcyB3aGljaCBoZWFkZXJzXG4gICAqIGNhbiBiZSBleHBvc2VkIGFzIHBhcnQgb2YgdGhlIHJlc3BvbnNlIGJ5IGxpc3RpbmcgdGhlaXIgbmFtZXMuXG4gICAqXG4gICAqIElmIHlvdSB3YW50IGNsaWVudHMgdG8gYmUgYWJsZSB0byBhY2Nlc3Mgb3RoZXIgaGVhZGVycywgeW91IGhhdmUgdG8gbGlzdFxuICAgKiB0aGVtIHVzaW5nIHRoZSBBY2Nlc3MtQ29udHJvbC1FeHBvc2UtSGVhZGVycyBoZWFkZXIuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0FjY2Vzcy1Db250cm9sLUV4cG9zZS1IZWFkZXJzXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gb25seSB0aGUgNiBDT1JTLXNhZmVsaXN0ZWQgcmVzcG9uc2UgaGVhZGVycyBhcmUgZXhwb3NlZDpcbiAgICogQ2FjaGUtQ29udHJvbCwgQ29udGVudC1MYW5ndWFnZSwgQ29udGVudC1UeXBlLCBFeHBpcmVzLCBMYXN0LU1vZGlmaWVkLFxuICAgKiBQcmFnbWFcbiAgICovXG4gIHJlYWRvbmx5IGV4cG9zZUhlYWRlcnM/OiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGNsYXNzIENvcnMge1xuICAvKipcbiAgICogQWxsIEhUVFAgbWV0aG9kcy5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQUxMX01FVEhPRFMgPSBBTExfTUVUSE9EUztcblxuICAvKipcbiAgICogQWxsIG9yaWdpbnMuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFMTF9PUklHSU5TID0gWyAnKicgXTtcblxuICAvKipcbiAgICogVGhlIHNldCBvZiBkZWZhdWx0IGhlYWRlcnMgYWxsb3dlZCBmb3IgQ09SUyBhbmQgdXNlZnVsIGZvciBBUEkgR2F0ZXdheS5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgREVGQVVMVF9IRUFERVJTID0gWyAnQ29udGVudC1UeXBlJywgJ1gtQW16LURhdGUnLCAnQXV0aG9yaXphdGlvbicsICdYLUFwaS1LZXknLCAnWC1BbXotU2VjdXJpdHktVG9rZW4nLCAnWC1BbXotVXNlci1BZ2VudCcgXTtcblxuICAvLyB1dGlsaXR5IGNsYXNzXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7IH1cbn1cbiJdfQ==