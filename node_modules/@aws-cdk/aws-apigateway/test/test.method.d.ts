import { Test } from 'nodeunit';
declare const _default: {
    'default setup'(test: Test): void;
    'method options can be specified'(test: Test): void;
    'integration can be set via a property'(test: Test): void;
    'integration with a custom http method can be set via a property'(test: Test): void;
    'use default integration from api'(test: Test): void;
    '"methodArn" returns the ARN execute-api ARN for this method in the current stage'(test: Test): void;
    '"testMethodArn" returns the ARN of the "test-invoke-stage" stage (console UI)'(test: Test): void;
    '"methodArn" fails if the API does not have a deployment stage'(test: Test): void;
    'integration "credentialsRole" can be used to assume a role when calling backend'(test: Test): void;
    'integration "credentialsPassthrough" can be used to passthrough user credentials to backend'(test: Test): void;
    'integration "credentialsRole" and "credentialsPassthrough" are mutually exclusive'(test: Test): void;
    'integration connectionType VpcLink requires vpcLink to be set'(test: Test): void;
    'connectionType of INTERNET and vpcLink are mutually exclusive'(test: Test): void;
    'methodResponse set one or more method responses via options'(test: Test): void;
    'multiple integration responses can be used'(test: Test): void;
    'method is always set as uppercase'(test: Test): void;
    'requestModel can be set'(test: Test): void;
    'methodResponse has a mix of response modes'(test: Test): void;
    'method has a request validator'(test: Test): void;
    'use default requestParameters'(test: Test): void;
    'authorizer is bound correctly'(test: Test): void;
    'authorizer via default method options'(test: Test): void;
    'fails when authorization type does not match the authorizer'(test: Test): void;
    'fails when authorization type does not match the authorizer in default method options'(test: Test): void;
};
export = _default;
