import { IPrincipal, IRole } from "@aws-cdk/aws-iam";
import { Construct, Stack } from "@aws-cdk/core";
import { InstanceType } from ".";
import { Connections } from "./connections";
import { IInstance, Instance } from "./instance";
import { IPeer } from "./peer";
import { ISecurityGroup } from "./security-group";
import { IVpc, SubnetSelection } from "./vpc";
/**
 * Properties of the bastion host
 *
 * @experimental
 */
export interface BastionHostLinuxProps {
    /**
     * In which AZ to place the instance within the VPC
     *
     * @default - Random zone.
     */
    readonly availabilityZone?: string;
    /**
     * VPC to launch the instance in.
     */
    readonly vpc: IVpc;
    /**
     * The name of the instance
     *
     * @default 'BastionHost'
     */
    readonly instanceName?: string;
    /**
     * Select the subnets to run the bastion host in.
     * Set this to PUBLIC if you need to connect to this instance via the internet and cannot use SSM.
     * You have to allow port 22 manually by using the connections field
     *
     * @default - private subnets of the supplied VPC
     */
    readonly subnetSelection?: SubnetSelection;
    /**
     * Security Group to assign to this instance
     *
     * @default - create new security group with no inbound and all outbound traffic allowed
     */
    readonly securityGroup?: ISecurityGroup;
    /**
     * Type of instance to launch
     * @default 't3.nano'
     */
    readonly instanceType?: InstanceType;
}
/**
 * This creates a linux bastion host you can use to connect to other instances or services in your VPC.
 * The recommended way to connect to the bastion host is by using AWS Systems Manager Session Manager.
 *
 * The operating system is Amazon Linux 2 with the latest SSM agent installed
 *
 * You can also configure this bastion host to allow connections via SSH
 *
 * @experimental
 */
export declare class BastionHostLinux extends Construct implements IInstance {
    readonly stack: Stack;
    /**
     * Allows specify security group connections for the instance.
     */
    readonly connections: Connections;
    /**
     * The IAM role assumed by the instance.
     */
    readonly role: IRole;
    /**
     * The principal to grant permissions to
     */
    readonly grantPrincipal: IPrincipal;
    /**
     * The underlying instance resource
     */
    readonly instance: Instance;
    /**
     * @attribute
     */
    readonly instanceId: string;
    /**
     * @attribute
     */
    readonly instanceAvailabilityZone: string;
    /**
     * @attribute
     */
    readonly instancePrivateDnsName: string;
    /**
     * @attribute
     */
    readonly instancePrivateIp: string;
    /**
     * @attribute
     */
    readonly instancePublicDnsName: string;
    /**
     * @attribute
     */
    readonly instancePublicIp: string;
    constructor(scope: Construct, id: string, props: BastionHostLinuxProps);
    /**
     * Allow SSH access from the given peer or peers
     *
     * Necessary if you want to connect to the instance using ssh. If not
     * called, you should use SSM Session Manager to connect to the instance.
     */
    allowSshAccessFrom(...peer: IPeer[]): void;
}
