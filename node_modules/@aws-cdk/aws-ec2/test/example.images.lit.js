"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ec2 = require("../lib");
/// !show
// Pick the right Amazon Linux edition. All arguments shown are optional
// and will default to these values when omitted.
const amznLinux = new ec2.AmazonLinuxImage({
    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,
    edition: ec2.AmazonLinuxEdition.STANDARD,
    virtualization: ec2.AmazonLinuxVirt.HVM,
    storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,
});
// Pick a Windows edition to use
const windows = new ec2.WindowsImage(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);
// Look up the most recent image matching a set of AMI filters.
// In this case, look up the NAT instance AMI, by using a wildcard
// in the 'name' field:
const natAmi = new ec2.LookupMachineImage({
    name: 'amzn-ami-vpc-nat-*',
    owners: ['amazon'],
});
// For other custom (Linux) images, instantiate a `GenericLinuxImage` with
// a map giving the AMI to in for each region:
const linux = new ec2.GenericLinuxImage({
    'us-east-1': 'ami-97785bed',
    'eu-west-1': 'ami-12345678',
});
// For other custom (Windows) images, instantiate a `GenericWindowsImage` with
// a map giving the AMI to in for each region:
const genericWindows = new ec2.GenericWindowsImage({
    'us-east-1': 'ami-97785bed',
    'eu-west-1': 'ami-12345678',
});
/// !hide
Array.isArray(windows);
Array.isArray(amznLinux);
Array.isArray(linux);
Array.isArray(genericWindows);
Array.isArray(natAmi);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZS5pbWFnZXMubGl0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZXhhbXBsZS5pbWFnZXMubGl0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsOEJBQThCO0FBRTlCLFNBQVM7QUFDVCx3RUFBd0U7QUFDeEUsaURBQWlEO0FBQ2pELE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDO0lBQ3pDLFVBQVUsRUFBRSxHQUFHLENBQUMscUJBQXFCLENBQUMsWUFBWTtJQUNsRCxPQUFPLEVBQUUsR0FBRyxDQUFDLGtCQUFrQixDQUFDLFFBQVE7SUFDeEMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRztJQUN2QyxPQUFPLEVBQUUsR0FBRyxDQUFDLGtCQUFrQixDQUFDLGVBQWU7Q0FDaEQsQ0FBQyxDQUFDO0FBRUgsZ0NBQWdDO0FBQ2hDLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7QUFFL0YsK0RBQStEO0FBQy9ELGtFQUFrRTtBQUNsRSx1QkFBdUI7QUFDdkIsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsa0JBQWtCLENBQUM7SUFDeEMsSUFBSSxFQUFFLG9CQUFvQjtJQUMxQixNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUM7Q0FDbkIsQ0FBQyxDQUFDO0FBRUgsMEVBQTBFO0FBQzFFLDhDQUE4QztBQUU5QyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQztJQUNwQyxXQUFXLEVBQUUsY0FBYztJQUMzQixXQUFXLEVBQUUsY0FBYztDQUU5QixDQUFDLENBQUM7QUFFSCw4RUFBOEU7QUFDOUUsOENBQThDO0FBRTlDLE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLG1CQUFtQixDQUFDO0lBQ2pELFdBQVcsRUFBRSxjQUFjO0lBQzNCLFdBQVcsRUFBRSxjQUFjO0NBRTVCLENBQUMsQ0FBQztBQUNILFNBQVM7QUFFVCxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZCLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQixLQUFLLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzlCLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBlYzIgZnJvbSAnLi4vbGliJztcblxuLy8vICFzaG93XG4vLyBQaWNrIHRoZSByaWdodCBBbWF6b24gTGludXggZWRpdGlvbi4gQWxsIGFyZ3VtZW50cyBzaG93biBhcmUgb3B0aW9uYWxcbi8vIGFuZCB3aWxsIGRlZmF1bHQgdG8gdGhlc2UgdmFsdWVzIHdoZW4gb21pdHRlZC5cbmNvbnN0IGFtem5MaW51eCA9IG5ldyBlYzIuQW1hem9uTGludXhJbWFnZSh7XG4gIGdlbmVyYXRpb246IGVjMi5BbWF6b25MaW51eEdlbmVyYXRpb24uQU1BWk9OX0xJTlVYLFxuICBlZGl0aW9uOiBlYzIuQW1hem9uTGludXhFZGl0aW9uLlNUQU5EQVJELFxuICB2aXJ0dWFsaXphdGlvbjogZWMyLkFtYXpvbkxpbnV4VmlydC5IVk0sXG4gIHN0b3JhZ2U6IGVjMi5BbWF6b25MaW51eFN0b3JhZ2UuR0VORVJBTF9QVVJQT1NFLFxufSk7XG5cbi8vIFBpY2sgYSBXaW5kb3dzIGVkaXRpb24gdG8gdXNlXG5jb25zdCB3aW5kb3dzID0gbmV3IGVjMi5XaW5kb3dzSW1hZ2UoZWMyLldpbmRvd3NWZXJzaW9uLldJTkRPV1NfU0VSVkVSXzIwMTlfRU5HTElTSF9GVUxMX0JBU0UpO1xuXG4vLyBMb29rIHVwIHRoZSBtb3N0IHJlY2VudCBpbWFnZSBtYXRjaGluZyBhIHNldCBvZiBBTUkgZmlsdGVycy5cbi8vIEluIHRoaXMgY2FzZSwgbG9vayB1cCB0aGUgTkFUIGluc3RhbmNlIEFNSSwgYnkgdXNpbmcgYSB3aWxkY2FyZFxuLy8gaW4gdGhlICduYW1lJyBmaWVsZDpcbmNvbnN0IG5hdEFtaSA9IG5ldyBlYzIuTG9va3VwTWFjaGluZUltYWdlKHtcbiAgbmFtZTogJ2Ftem4tYW1pLXZwYy1uYXQtKicsXG4gIG93bmVyczogWydhbWF6b24nXSxcbn0pO1xuXG4vLyBGb3Igb3RoZXIgY3VzdG9tIChMaW51eCkgaW1hZ2VzLCBpbnN0YW50aWF0ZSBhIGBHZW5lcmljTGludXhJbWFnZWAgd2l0aFxuLy8gYSBtYXAgZ2l2aW5nIHRoZSBBTUkgdG8gaW4gZm9yIGVhY2ggcmVnaW9uOlxuXG5jb25zdCBsaW51eCA9IG5ldyBlYzIuR2VuZXJpY0xpbnV4SW1hZ2Uoe1xuICAgICd1cy1lYXN0LTEnOiAnYW1pLTk3Nzg1YmVkJyxcbiAgICAnZXUtd2VzdC0xJzogJ2FtaS0xMjM0NTY3OCcsXG4gICAgLy8gLi4uXG59KTtcblxuLy8gRm9yIG90aGVyIGN1c3RvbSAoV2luZG93cykgaW1hZ2VzLCBpbnN0YW50aWF0ZSBhIGBHZW5lcmljV2luZG93c0ltYWdlYCB3aXRoXG4vLyBhIG1hcCBnaXZpbmcgdGhlIEFNSSB0byBpbiBmb3IgZWFjaCByZWdpb246XG5cbmNvbnN0IGdlbmVyaWNXaW5kb3dzID0gbmV3IGVjMi5HZW5lcmljV2luZG93c0ltYWdlKHtcbiAgJ3VzLWVhc3QtMSc6ICdhbWktOTc3ODViZWQnLFxuICAnZXUtd2VzdC0xJzogJ2FtaS0xMjM0NTY3OCcsXG4gIC8vIC4uLlxufSk7XG4vLy8gIWhpZGVcblxuQXJyYXkuaXNBcnJheSh3aW5kb3dzKTtcbkFycmF5LmlzQXJyYXkoYW16bkxpbnV4KTtcbkFycmF5LmlzQXJyYXkobGludXgpO1xuQXJyYXkuaXNBcnJheShnZW5lcmljV2luZG93cyk7XG5BcnJheS5pc0FycmF5KG5hdEFtaSk7XG4iXX0=