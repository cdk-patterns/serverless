import { Test } from 'nodeunit';
declare const _default: {
    IP: {
        "should convert a valid IP Address to an integer"(test: Test): void;
        "should throw on invalid IP Address"(test: Test): void;
        "should convert a valid IP integer to a staring"(test: Test): void;
        "should throw an error for invalid IP"(test: Test): void;
        "validIp returns true if octect is in 0-255"(test: Test): void;
        "validIp returns false if octect is not in 0-255"(test: Test): void;
    };
    CidrBlock: {
        "should return the next valid subnet from offset IP"(test: Test): void;
        "nextBlock() returns the next higher CIDR space"(test: Test): void;
        "maxIp() should return the last usable IP from the CidrBlock"(test: Test): void;
        "minIp() should return the first usable IP from the CidrBlock"(test: Test): void;
        "containsCidr returns true if fully contained"(test: Test): void;
        "containsCidr returns false if not fully contained"(test: Test): void;
        "calculateNetmask returns the ip string mask"(test: Test): void;
    };
    NetworkBuilder: {
        "allows you to carve subnets our of CIDR network"(test: Test): void;
        "throws on subnets < 16 or > 28"(test: Test): void;
        "throws if you add a subnet outside of the cidr"(test: Test): void;
        "maskForRemainingSubnets calcs mask for even split of remaining"(test: Test): void;
    };
};
export = _default;
