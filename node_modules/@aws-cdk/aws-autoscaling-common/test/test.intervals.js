"use strict";
const fc = require("fast-check");
const interval_utils_1 = require("../lib/interval-utils");
const util_1 = require("./util");
function realisticRelativeIntervals() {
    // Function so we don't have to worry about cloning
    return [
        { upper: 10, change: -2 },
        { upper: 20, change: -1 },
        { lower: 80, change: +1 },
        { lower: 90, change: +2 },
    ];
}
module.exports = {
    'test bounds propagation'(test) {
        const intervals = interval_utils_1.normalizeIntervals(realisticRelativeIntervals(), false);
        test.deepEqual(intervals, [
            { lower: 0, upper: 10, change: -2 },
            { lower: 10, upper: 20, change: -1 },
            { lower: 20, upper: 80, change: undefined },
            { lower: 80, upper: 90, change: +1 },
            { lower: 90, upper: Infinity, change: +2 },
        ]);
        test.done();
    },
    'bounds propagation fails if middle boundary missing'(test) {
        test.throws(() => {
            interval_utils_1.normalizeIntervals([
                { lower: 0, change: -2 },
                { upper: 20, change: -1 },
            ], false);
        });
        test.done();
    },
    'lower alarm index is lower than higher alarm index'(test) {
        fc.assert(fc.property(util_1.arbitrary_complete_intervals(), (intervals) => {
            const alarms = interval_utils_1.findAlarmThresholds(intervals);
            return (alarms.lowerAlarmIntervalIndex === undefined
                || alarms.upperAlarmIntervalIndex === undefined
                || alarms.lowerAlarmIntervalIndex < alarms.upperAlarmIntervalIndex);
        }));
        test.done();
    },
    'never pick undefined intervals for relative alarms'(test) {
        fc.assert(fc.property(util_1.arbitrary_complete_intervals(), (intervals) => {
            const alarms = interval_utils_1.findAlarmThresholds(intervals);
            return (alarms.lowerAlarmIntervalIndex === undefined || intervals[alarms.lowerAlarmIntervalIndex].change !== undefined)
                && (alarms.upperAlarmIntervalIndex === undefined || intervals[alarms.upperAlarmIntervalIndex].change !== undefined);
        }));
        test.done();
    },
    'pick intervals on either side of the undefined interval, if present'(test) {
        fc.assert(fc.property(util_1.arbitrary_complete_intervals(), (intervals) => {
            // There must be an undefined interval and it must not be at the edges
            const i = intervals.findIndex(x => x.change === undefined);
            fc.pre(i > 0 && i < intervals.length - 1);
            const alarms = interval_utils_1.findAlarmThresholds(intervals);
            return (alarms.lowerAlarmIntervalIndex === i - 1 && alarms.upperAlarmIntervalIndex === i + 1);
        }));
        test.done();
    },
    'no picking upper bound infinity for lower alarm'(test) {
        fc.assert(fc.property(util_1.arbitrary_complete_intervals(), (intervals) => {
            const alarms = interval_utils_1.findAlarmThresholds(intervals);
            fc.pre(alarms.lowerAlarmIntervalIndex !== undefined);
            return intervals[alarms.lowerAlarmIntervalIndex].upper !== Infinity;
        }));
        test.done();
    },
    'no picking lower bound 0 for upper alarm'(test) {
        fc.assert(fc.property(util_1.arbitrary_complete_intervals(), (intervals) => {
            const alarms = interval_utils_1.findAlarmThresholds(intervals);
            fc.pre(alarms.upperAlarmIntervalIndex !== undefined);
            return intervals[alarms.upperAlarmIntervalIndex].lower !== 0;
        }));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,