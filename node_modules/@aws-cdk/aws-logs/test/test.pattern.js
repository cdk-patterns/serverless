"use strict";
const lib_1 = require("../lib");
module.exports = {
    'text patterns': {
        'simple text pattern'(test) {
            const pattern = lib_1.FilterPattern.allTerms('foo', 'bar', 'baz');
            test.equal('"foo" "bar" "baz"', pattern.logPatternString);
            test.done();
        },
        'quoted terms'(test) {
            const pattern = lib_1.FilterPattern.allTerms('"foo" he said');
            test.equal('"\\"foo\\" he said"', pattern.logPatternString);
            test.done();
        },
        'disjunction of conjunctions'(test) {
            const pattern = lib_1.FilterPattern.anyTermGroup(["foo", "bar"], ["baz"]);
            test.equal('?"foo" "bar" ?"baz"', pattern.logPatternString);
            test.done();
        },
        'dont prefix with ? if only one disjunction'(test) {
            const pattern = lib_1.FilterPattern.anyTermGroup(["foo", "bar"]);
            test.equal('"foo" "bar"', pattern.logPatternString);
            test.done();
        },
        'empty log pattern is empty string'(test) {
            const pattern = lib_1.FilterPattern.anyTermGroup();
            test.equal('', pattern.logPatternString);
            test.done();
        }
    },
    'json patterns': {
        'string value'(test) {
            const pattern = lib_1.FilterPattern.stringValue('$.field', '=', 'value');
            test.equal('{ $.field = "value" }', pattern.logPatternString);
            test.done();
        },
        'also recognize =='(test) {
            const pattern = lib_1.FilterPattern.stringValue('$.field', '==', 'value');
            test.equal('{ $.field = "value" }', pattern.logPatternString);
            test.done();
        },
        'number patterns'(test) {
            const pattern = lib_1.FilterPattern.numberValue('$.field', '<=', 300);
            test.equal('{ $.field <= 300 }', pattern.logPatternString);
            test.done();
        },
        'combining with AND or OR'(test) {
            const p1 = lib_1.FilterPattern.numberValue('$.field', '<=', 300);
            const p2 = lib_1.FilterPattern.stringValue('$.field', '=', 'value');
            const andPattern = lib_1.FilterPattern.all(p1, p2);
            test.equal('{ ($.field <= 300) && ($.field = "value") }', andPattern.logPatternString);
            const orPattern = lib_1.FilterPattern.any(p1, p2);
            test.equal('{ ($.field <= 300) || ($.field = "value") }', orPattern.logPatternString);
            test.done();
        },
        'single AND is not wrapped with parens'(test) {
            const p1 = lib_1.FilterPattern.stringValue('$.field', '=', 'value');
            const pattern = lib_1.FilterPattern.all(p1);
            test.equal('{ $.field = "value" }', pattern.logPatternString);
            test.done();
        },
        'empty AND is rejected'(test) {
            test.throws(() => {
                lib_1.FilterPattern.all();
            });
            test.done();
        },
        'invalid string operators are rejected'(test) {
            test.throws(() => {
                lib_1.FilterPattern.stringValue('$.field', '<=', 'hello');
            });
            test.done();
        },
        'can test boolean value'(test) {
            const pattern = lib_1.FilterPattern.booleanValue('$.field', false);
            test.equal('{ $.field IS FALSE }', pattern.logPatternString);
            test.done();
        },
    },
    'table patterns': {
        'simple model'(test) {
            const pattern = lib_1.FilterPattern.spaceDelimited('...', 'status_code', 'bytes');
            test.equal('[..., status_code, bytes]', pattern.logPatternString);
            test.done();
        },
        'add restrictions'(test) {
            const pattern = lib_1.FilterPattern.spaceDelimited('...', 'status_code', 'bytes')
                .whereString('status_code', '=', '4*')
                .whereNumber('status_code', '!=', 403);
            test.equal('[..., status_code = "4*" && status_code != 403, bytes]', pattern.logPatternString);
            test.done();
        },
        'cant use more than one ellipsis'(test) {
            test.throws(() => {
                lib_1.FilterPattern.spaceDelimited('...', 'status_code', '...');
            });
            test.done();
        }
    }
};
//# sourceMappingURL=data:application/json;base64,