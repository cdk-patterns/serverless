{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "bundled": {
    "minimatch": "^3.0.4"
  },
  "dependencies": {
    "@aws-cdk/core": "1.22.0",
    "@aws-cdk/cx-api": "1.22.0"
  },
  "dependencyClosure": {
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK",
          "signAssembly": true
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI",
          "signAssembly": true
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    }
  },
  "description": "Integration of CDK apps with local assets",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "0.21.2 (build 4370756)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "assets"
  ],
  "license": "Apache-2.0",
  "name": "@aws-cdk/assets",
  "readme": {
    "markdown": "## AWS CDK Assets\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![Stability: Experimental](https://img.shields.io/badge/stability-Experimental-important.svg?style=for-the-badge)\n\n> **This is a _developer preview_ (public beta) module. Releases might lack important features and might have\n> future breaking changes.**\n>\n> This API is still under active development and subject to non-backward\n> compatible changes or removal in any future version. Use of the API is not recommended in production\n> environments. Experimental APIs are not subject to the Semantic Versioning model.\n\n---\n<!--END STABILITY BANNER-->\n\nThis module includes core classes for to CDK assets, used for copying asset\nfiles to a staging area. Most CDK users should not need to use the classes in\nthis package directly.\n\n\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/assets",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "assemblyOriginatorKeyFile": "../../key.snk",
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.Assets",
      "packageId": "Amazon.CDK.Assets",
      "signAssembly": true
    },
    "java": {
      "maven": {
        "artifactId": "cdk-assets",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.assets"
    },
    "js": {
      "npm": "@aws-cdk/assets"
    },
    "python": {
      "distName": "aws-cdk.assets",
      "module": "aws_cdk.assets"
    }
  },
  "types": {
    "@aws-cdk/assets.CopyOptions": {
      "assembly": "@aws-cdk/assets",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Obtains applied when copying directories into the staging location."
      },
      "fqn": "@aws-cdk/assets.CopyOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fs/options.ts",
        "line": 6
      },
      "name": "CopyOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "nothing is excluded",
            "stability": "experimental",
            "summary": "Glob patterns to exclude from the copy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fs/options.ts",
            "line": 19
          },
          "name": "exclude",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Never",
            "stability": "experimental",
            "summary": "A strategy for how to handle symlinks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fs/options.ts",
            "line": 12
          },
          "name": "follow",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/assets.FollowMode"
          }
        }
      ]
    },
    "@aws-cdk/assets.FingerprintOptions": {
      "assembly": "@aws-cdk/assets",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options related to calculating source hash."
      },
      "fqn": "@aws-cdk/assets.FingerprintOptions",
      "interfaces": [
        "@aws-cdk/assets.CopyOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fs/options.ts",
        "line": 25
      },
      "name": "FingerprintOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- hash is only based on source content",
            "stability": "experimental",
            "summary": "Extra information to encode into the fingerprint (e.g. build instructions and other inputs)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fs/options.ts",
            "line": 32
          },
          "name": "extraHash",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/assets.FollowMode": {
      "assembly": "@aws-cdk/assets",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "@aws-cdk/assets.FollowMode",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/fs/follow-mode.ts",
        "line": 1
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Never follow symlinks."
          },
          "name": "NEVER"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Materialize all symlinks, whether they are internal or external to the source directory."
          },
          "name": "ALWAYS"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Only follows symlinks that are external to the source directory."
          },
          "name": "EXTERNAL"
        },
        {
          "docs": {
            "remarks": "This is the safest mode of operation as it ensures that copy operations\nwon't materialize files from the user's file system. Internal symlinks are\nnot followed.\n\nIf the copy operation runs into an external symlink, it will fail.",
            "stability": "experimental",
            "summary": "Forbids source from having any symlinks pointing outside of the source tree."
          },
          "name": "BLOCK_EXTERNAL"
        }
      ],
      "name": "FollowMode"
    },
    "@aws-cdk/assets.IAsset": {
      "assembly": "@aws-cdk/assets",
      "docs": {
        "stability": "experimental",
        "summary": "Common interface for all assets."
      },
      "fqn": "@aws-cdk/assets.IAsset",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/api.ts",
        "line": 4
      },
      "name": "IAsset",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "As this is a plain\nstring, it can be used in construct IDs in order to enforce creation of a new resource when\nthe content hash has changed.",
            "stability": "experimental",
            "summary": "A hash of the source of this asset, which is available at construction time."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/api.ts",
            "line": 10
          },
          "name": "sourceHash",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/assets.Staging": {
      "assembly": "@aws-cdk/assets",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "remarks": "This is controlled by the context key 'aws:cdk:asset-staging' and enabled\nby the CLI by default in order to ensure that when the CDK app exists, all\nassets are available for deployment. Otherwise, if an app references assets\nin temporary locations, those will not be available when it exists (see\nhttps://github.com/aws/aws-cdk/issues/1716).\n\nThe `stagedPath` property is a stringified token that represents the location\nof the file or directory after staging. It will be resolved only during the\n\"prepare\" stage and may be either the original path or the staged path\ndepending on the context setting.\n\nThe file/directory are staged based on their content hash (fingerprint). This\nmeans that only if content was changed, copy will happen.",
        "stability": "experimental",
        "summary": "Stages a file or directory from a location on the file system into a staging directory."
      },
      "fqn": "@aws-cdk/assets.Staging",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/assets.StagingProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/staging.ts",
        "line": 29
      },
      "methods": [
        {
          "docs": {
            "remarks": "This method is usually implemented by framework-level constructs such as `Stack` and `Asset`\nas they participate in synthesizing the cloud assembly.",
            "stability": "experimental",
            "summary": "Allows this construct to emit artifacts into the cloud assembly during synthesis."
          },
          "locationInModule": {
            "filename": "lib/staging.ts",
            "line": 69
          },
          "name": "synthesize",
          "overrides": "@aws-cdk/core.Construct",
          "parameters": [
            {
              "name": "session",
              "type": {
                "fqn": "@aws-cdk/core.ISynthesisSession"
              }
            }
          ],
          "protected": true
        }
      ],
      "name": "Staging",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "A cryptographic hash of the source document(s)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/staging.ts",
            "line": 47
          },
          "name": "sourceHash",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The path of the asset as it was referenced by the user."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/staging.ts",
            "line": 42
          },
          "name": "sourcePath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "If asset staging is disabled, this will just be the original path.\nIf asset staging is enabled it will be the staged path.",
            "stability": "experimental",
            "summary": "The path to the asset (stringinfied token)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/staging.ts",
            "line": 37
          },
          "name": "stagedPath",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/assets.StagingProps": {
      "assembly": "@aws-cdk/assets",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "@aws-cdk/assets.StagingProps",
      "interfaces": [
        "@aws-cdk/assets.FingerprintOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/staging.ts",
        "line": 7
      },
      "name": "StagingProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/staging.ts",
            "line": 8
          },
          "name": "sourcePath",
          "type": {
            "primitive": "string"
          }
        }
      ]
    }
  },
  "version": "1.22.0",
  "fingerprint": "Gz85ZWPZ8/r8IRH4cy/+KJrPe1BVPMqYoOZQJPErODo="
}
