"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const path = require("path");
const lib_1 = require("../lib");
const versioning_1 = require("../lib/versioning");
test('cloud assembly builder', () => {
    // GIVEN
    const outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'cloud-assembly-builder-tests'));
    const session = new lib_1.CloudAssemblyBuilder(outdir);
    const templateFile = 'foo.template.json';
    // WHEN
    session.addArtifact('my-first-artifact', {
        type: lib_1.ArtifactType.AWS_CLOUDFORMATION_STACK,
        environment: 'aws://1222344/us-east-1',
        dependencies: ['minimal-artifact'],
        metadata: {
            foo: [{ data: 123, type: 'foo', trace: [] }]
        },
        properties: {
            templateFile,
            parameters: {
                prop1: '1234',
                prop2: '555'
            }
        },
    });
    session.addArtifact('tree-artifact', {
        type: lib_1.ArtifactType.CDK_TREE,
        properties: {
            file: 'foo.tree.json'
        }
    });
    session.addMissing({
        key: 'foo',
        provider: 'context-provider',
        props: {
            a: 'A',
            b: 2
        }
    });
    session.addArtifact('minimal-artifact', {
        type: lib_1.ArtifactType.AWS_CLOUDFORMATION_STACK,
        environment: 'aws://111/helo-world',
        properties: {
            templateFile
        }
    });
    fs.writeFileSync(path.join(session.outdir, templateFile), JSON.stringify({
        Resources: {
            MyTopic: {
                Type: 'AWS::S3::Topic'
            }
        }
    }));
    const assembly = session.buildAssembly();
    const manifest = assembly.manifest;
    // THEN
    // verify the manifest looks right
    expect(manifest).toStrictEqual({
        version: versioning_1.CLOUD_ASSEMBLY_VERSION,
        missing: [
            { key: 'foo', provider: 'context-provider', props: { a: 'A', b: 2 } }
        ],
        artifacts: {
            'tree-artifact': {
                type: 'cdk:tree',
                properties: {
                    file: 'foo.tree.json'
                }
            },
            'my-first-artifact': {
                type: 'aws:cloudformation:stack',
                environment: 'aws://1222344/us-east-1',
                dependencies: ['minimal-artifact'],
                metadata: { foo: [{ data: 123, type: 'foo', trace: [] }] },
                properties: {
                    templateFile: 'foo.template.json',
                    parameters: {
                        prop1: '1234',
                        prop2: '555'
                    },
                },
            },
            'minimal-artifact': {
                type: 'aws:cloudformation:stack',
                environment: 'aws://111/helo-world',
                properties: { templateFile: 'foo.template.json' }
            }
        }
    });
    // verify we have a template file
    expect(assembly.getStackByName('minimal-artifact').template).toStrictEqual({
        Resources: {
            MyTopic: {
                Type: 'AWS::S3::Topic'
            }
        }
    });
});
test('outdir must be a directory', () => {
    expect(() => new lib_1.CloudAssemblyBuilder(__filename)).toThrow('must be a directory');
});
test('duplicate missing values with the same key are only reported once', () => {
    const outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'cloud-assembly-builder-tests'));
    const session = new lib_1.CloudAssemblyBuilder(outdir);
    session.addMissing({ key: 'foo', provider: 'context-provider', props: {} });
    session.addMissing({ key: 'foo', provider: 'context-provider', props: {} });
    const assembly = session.buildAssembly();
    expect(assembly.manifest.missing.length).toEqual(1);
});
//# sourceMappingURL=data:application/json;base64,