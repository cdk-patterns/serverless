"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ec2 = require("@aws-cdk/aws-ec2");
const cdk = require("@aws-cdk/core");
const lib_1 = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-route53-integ');
const vpc = new ec2.Vpc(stack, 'VPC', { maxAzs: 1 });
const privateZone = new lib_1.PrivateHostedZone(stack, 'PrivateZone', {
    zoneName: 'cdk.local', vpc
});
const publicZone = new lib_1.PublicHostedZone(stack, 'PublicZone', {
    zoneName: 'cdk.test'
});
const publicSubZone = new lib_1.PublicHostedZone(stack, 'PublicSubZone', {
    zoneName: 'sub.cdk.test'
});
publicZone.addDelegation(publicSubZone);
new lib_1.TxtRecord(privateZone, 'TXT', {
    zone: privateZone,
    recordName: '_foo',
    values: [
        'Bar!',
        'Baz?'
    ],
    ttl: cdk.Duration.minutes(1)
});
new lib_1.CnameRecord(stack, 'CNAME', {
    zone: privateZone,
    recordName: 'www',
    domainName: 'server'
});
new lib_1.ARecord(stack, 'A', {
    zone: privateZone,
    recordName: 'test',
    target: lib_1.RecordTarget.fromIpAddresses('1.2.3.4', '5.6.7.8')
});
new lib_1.CaaAmazonRecord(stack, 'CaaAmazon', {
    zone: publicZone
});
new cdk.CfnOutput(stack, 'PrivateZoneId', { value: privateZone.hostedZoneId });
new cdk.CfnOutput(stack, 'PublicZoneId', { value: publicZone.hostedZoneId });
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucm91dGU1My5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLnJvdXRlNTMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBd0M7QUFDeEMscUNBQXFDO0FBQ3JDLGdDQUE2SDtBQUU3SCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLHVCQUF1QixDQUFDLENBQUM7QUFFMUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUVyRCxNQUFNLFdBQVcsR0FBRyxJQUFJLHVCQUFpQixDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUU7SUFDOUQsUUFBUSxFQUFFLFdBQVcsRUFBRSxHQUFHO0NBQzNCLENBQUMsQ0FBQztBQUVILE1BQU0sVUFBVSxHQUFHLElBQUksc0JBQWdCLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtJQUMzRCxRQUFRLEVBQUUsVUFBVTtDQUNyQixDQUFDLENBQUM7QUFDSCxNQUFNLGFBQWEsR0FBRyxJQUFJLHNCQUFnQixDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUU7SUFDakUsUUFBUSxFQUFFLGNBQWM7Q0FDekIsQ0FBQyxDQUFDO0FBQ0gsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUV4QyxJQUFJLGVBQVMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFO0lBQ2hDLElBQUksRUFBRSxXQUFXO0lBQ2pCLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE1BQU0sRUFBRTtRQUNOLE1BQU07UUFDTixNQUFNO0tBQ1A7SUFDRCxHQUFHLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0NBQzdCLENBQUMsQ0FBQztBQUVILElBQUksaUJBQVcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO0lBQzlCLElBQUksRUFBRSxXQUFXO0lBQ2pCLFVBQVUsRUFBRSxLQUFLO0lBQ2pCLFVBQVUsRUFBRSxRQUFRO0NBQ3JCLENBQUMsQ0FBQztBQUVILElBQUksYUFBTyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUU7SUFDdEIsSUFBSSxFQUFFLFdBQVc7SUFDakIsVUFBVSxFQUFFLE1BQU07SUFDbEIsTUFBTSxFQUFFLGtCQUFZLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUM7Q0FDM0QsQ0FBQyxDQUFDO0FBRUgsSUFBSSxxQkFBZSxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUU7SUFDdEMsSUFBSSxFQUFFLFVBQVU7Q0FDakIsQ0FBQyxDQUFDO0FBRUgsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUUsRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7QUFDL0UsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7QUFFN0UsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZWMyIGZyb20gJ0Bhd3MtY2RrL2F3cy1lYzInO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHsgQVJlY29yZCwgQ2FhQW1hem9uUmVjb3JkLCBDbmFtZVJlY29yZCwgUHJpdmF0ZUhvc3RlZFpvbmUsIFB1YmxpY0hvc3RlZFpvbmUsIFJlY29yZFRhcmdldCwgVHh0UmVjb3JkIH0gZnJvbSAnLi4vbGliJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1jZGstcm91dGU1My1pbnRlZycpO1xuXG5jb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZQQycsIHsgbWF4QXpzOiAxIH0pO1xuXG5jb25zdCBwcml2YXRlWm9uZSA9IG5ldyBQcml2YXRlSG9zdGVkWm9uZShzdGFjaywgJ1ByaXZhdGVab25lJywge1xuICB6b25lTmFtZTogJ2Nkay5sb2NhbCcsIHZwY1xufSk7XG5cbmNvbnN0IHB1YmxpY1pvbmUgPSBuZXcgUHVibGljSG9zdGVkWm9uZShzdGFjaywgJ1B1YmxpY1pvbmUnLCB7XG4gIHpvbmVOYW1lOiAnY2RrLnRlc3QnXG59KTtcbmNvbnN0IHB1YmxpY1N1YlpvbmUgPSBuZXcgUHVibGljSG9zdGVkWm9uZShzdGFjaywgJ1B1YmxpY1N1YlpvbmUnLCB7XG4gIHpvbmVOYW1lOiAnc3ViLmNkay50ZXN0J1xufSk7XG5wdWJsaWNab25lLmFkZERlbGVnYXRpb24ocHVibGljU3ViWm9uZSk7XG5cbm5ldyBUeHRSZWNvcmQocHJpdmF0ZVpvbmUsICdUWFQnLCB7XG4gIHpvbmU6IHByaXZhdGVab25lLFxuICByZWNvcmROYW1lOiAnX2ZvbycsXG4gIHZhbHVlczogW1xuICAgICdCYXIhJyxcbiAgICAnQmF6PydcbiAgXSxcbiAgdHRsOiBjZGsuRHVyYXRpb24ubWludXRlcygxKVxufSk7XG5cbm5ldyBDbmFtZVJlY29yZChzdGFjaywgJ0NOQU1FJywge1xuICB6b25lOiBwcml2YXRlWm9uZSxcbiAgcmVjb3JkTmFtZTogJ3d3dycsXG4gIGRvbWFpbk5hbWU6ICdzZXJ2ZXInXG59KTtcblxubmV3IEFSZWNvcmQoc3RhY2ssICdBJywge1xuICB6b25lOiBwcml2YXRlWm9uZSxcbiAgcmVjb3JkTmFtZTogJ3Rlc3QnLFxuICB0YXJnZXQ6IFJlY29yZFRhcmdldC5mcm9tSXBBZGRyZXNzZXMoJzEuMi4zLjQnLCAnNS42LjcuOCcpXG59KTtcblxubmV3IENhYUFtYXpvblJlY29yZChzdGFjaywgJ0NhYUFtYXpvbicsIHtcbiAgem9uZTogcHVibGljWm9uZVxufSk7XG5cbm5ldyBjZGsuQ2ZuT3V0cHV0KHN0YWNrLCAnUHJpdmF0ZVpvbmVJZCcsIHsgdmFsdWU6IHByaXZhdGVab25lLmhvc3RlZFpvbmVJZCB9KTtcbm5ldyBjZGsuQ2ZuT3V0cHV0KHN0YWNrLCAnUHVibGljWm9uZUlkJywgeyB2YWx1ZTogcHVibGljWm9uZS5ob3N0ZWRab25lSWQgfSk7XG5cbmFwcC5zeW50aCgpO1xuIl19