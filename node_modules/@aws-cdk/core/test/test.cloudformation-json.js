"use strict";
const lib_1 = require("../lib");
const intrinsic_1 = require("../lib/private/intrinsic");
const evaluate_cfn_1 = require("./evaluate-cfn");
/**
 * Return two Tokens, one of which evaluates to a Token directly, one which evaluates to it lazily
 */
function tokensThatResolveTo(value) {
    return [
        new intrinsic_1.Intrinsic(value),
        lib_1.Lazy.anyValue({ produce: () => value })
    ];
}
module.exports = {
    'string tokens can be JSONified and JSONification can be reversed'(test) {
        const stack = new lib_1.Stack();
        for (const token of tokensThatResolveTo('woof woof')) {
            // GIVEN
            const fido = { name: 'Fido', speaks: token };
            // WHEN
            const resolved = stack.resolve(stack.toJsonString(fido));
            // THEN
            test.deepEqual(evaluate_cfn_1.evaluateCFN(resolved), '{"name":"Fido","speaks":"woof woof"}');
        }
        test.done();
    },
    'string tokens can be embedded while being JSONified'(test) {
        const stack = new lib_1.Stack();
        for (const token of tokensThatResolveTo('woof woof')) {
            // GIVEN
            const fido = { name: 'Fido', speaks: `deep ${token}` };
            // WHEN
            const resolved = stack.resolve(stack.toJsonString(fido));
            // THEN
            test.deepEqual(evaluate_cfn_1.evaluateCFN(resolved), '{"name":"Fido","speaks":"deep woof woof"}');
        }
        test.done();
    },
    'constant string has correct amount of quotes applied'(test) {
        const stack = new lib_1.Stack();
        const inputString = 'Hello, "world"';
        // WHEN
        const resolved = stack.resolve(stack.toJsonString(inputString));
        // THEN
        test.deepEqual(evaluate_cfn_1.evaluateCFN(resolved), JSON.stringify(inputString));
        test.done();
    },
    'integer Tokens behave correctly in stringification and JSONification'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        const num = new intrinsic_1.Intrinsic(1);
        const embedded = `the number is ${num}`;
        // WHEN
        test.equal(evaluate_cfn_1.evaluateCFN(stack.resolve(embedded)), "the number is 1");
        test.equal(evaluate_cfn_1.evaluateCFN(stack.resolve(stack.toJsonString({ embedded }))), "{\"embedded\":\"the number is 1\"}");
        test.equal(evaluate_cfn_1.evaluateCFN(stack.resolve(stack.toJsonString({ num }))), "{\"num\":1}");
        test.done();
    },
    'tokens in strings survive additional TokenJSON.stringification()'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        for (const token of tokensThatResolveTo('pong!')) {
            // WHEN
            const stringified = stack.toJsonString(`ping? ${token}`);
            // THEN
            test.equal(evaluate_cfn_1.evaluateCFN(stack.resolve(stringified)), '"ping? pong!"');
        }
        test.done();
    },
    'intrinsic Tokens embed correctly in JSONification'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        const bucketName = new intrinsic_1.Intrinsic({ Ref: 'MyBucket' });
        // WHEN
        const resolved = stack.resolve(stack.toJsonString({ theBucket: bucketName }));
        // THEN
        const context = { MyBucket: 'TheName' };
        test.equal(evaluate_cfn_1.evaluateCFN(resolved, context), '{"theBucket":"TheName"}');
        test.done();
    },
    'fake intrinsics are serialized to objects'(test) {
        const stack = new lib_1.Stack();
        const fakeIntrinsics = new intrinsic_1.Intrinsic({
            a: {
                'Fn::GetArtifactAtt': {
                    key: 'val',
                },
            },
            b: {
                'Fn::GetParam': [
                    'val1',
                    'val2',
                ],
            },
        });
        const stringified = stack.toJsonString(fakeIntrinsics);
        test.equal(evaluate_cfn_1.evaluateCFN(stack.resolve(stringified)), '{"a":{"Fn::GetArtifactAtt":{"key":"val"}},"b":{"Fn::GetParam":["val1","val2"]}}');
        test.done();
    },
    'embedded string literals in intrinsics are escaped when calling TokenJSON.stringify()'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        const token = lib_1.Fn.join('', ['Hello', 'This\nIs', 'Very "cool"']);
        // WHEN
        const resolved = stack.resolve(stack.toJsonString({
            literal: 'I can also "contain" quotes',
            token
        }));
        // THEN
        const expected = '{"literal":"I can also \\"contain\\" quotes","token":"HelloThis\\nIsVery \\"cool\\""}';
        test.equal(evaluate_cfn_1.evaluateCFN(resolved), expected);
        test.done();
    },
    'Tokens in Tokens are handled correctly'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        const bucketName = new intrinsic_1.Intrinsic({ Ref: 'MyBucket' });
        const combinedName = lib_1.Fn.join('', ['The bucket name is ', bucketName.toString()]);
        // WHEN
        const resolved = stack.resolve(stack.toJsonString({ theBucket: combinedName }));
        // THEN
        const context = { MyBucket: 'TheName' };
        test.equal(evaluate_cfn_1.evaluateCFN(resolved, context), '{"theBucket":"The bucket name is TheName"}');
        test.done();
    },
    'Doubly nested strings evaluate correctly in JSON context'(test) {
        // WHEN
        const stack = new lib_1.Stack();
        const fidoSays = lib_1.Lazy.stringValue({ produce: () => 'woof' });
        // WHEN
        const resolved = stack.resolve(stack.toJsonString({
            information: `Did you know that Fido says: ${fidoSays}`
        }));
        // THEN
        test.deepEqual(evaluate_cfn_1.evaluateCFN(resolved), '{"information":"Did you know that Fido says: woof"}');
        test.done();
    },
    'Doubly nested intrinsics evaluate correctly in JSON context'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        const fidoSays = lib_1.Lazy.anyValue({ produce: () => ({ Ref: 'Something' }) });
        // WHEN
        const resolved = stack.resolve(stack.toJsonString({
            information: `Did you know that Fido says: ${fidoSays}`
        }));
        // THEN
        const context = { Something: 'woof woof' };
        test.deepEqual(evaluate_cfn_1.evaluateCFN(resolved, context), '{"information":"Did you know that Fido says: woof woof"}');
        test.done();
    },
    'Quoted strings in embedded JSON context are escaped'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        const fidoSays = lib_1.Lazy.stringValue({ produce: () => '"woof"' });
        // WHEN
        const resolved = stack.resolve(stack.toJsonString({
            information: `Did you know that Fido says: ${fidoSays}`
        }));
        // THEN
        test.deepEqual(evaluate_cfn_1.evaluateCFN(resolved), '{"information":"Did you know that Fido says: \\"woof\\""}');
        test.done();
    },
    'cross-stack references are also properly converted by toJsonString()'(test) {
        // GIVEN
        const app = new lib_1.App();
        const stack1 = new lib_1.Stack(app, 'Stack1');
        const stack2 = new lib_1.Stack(app, 'Stack2');
        // WHEN
        new lib_1.CfnOutput(stack2, 'Stack1Id', { value: stack2.toJsonString({
                Stack1Id: stack1.stackId,
                Stack2Id: stack2.stackId,
            }) });
        // THEN
        const asm = app.synth();
        test.deepEqual(asm.getStackByName('Stack2').template, {
            Outputs: {
                Stack1Id: {
                    Value: {
                        'Fn::Join': ['', [
                                '{"Stack1Id":"',
                                { 'Fn::ImportValue': 'Stack1:ExportsOutputRefAWSStackIdB2DD5BAA' },
                                '","Stack2Id":"',
                                { Ref: 'AWS::StackId' },
                                '"}'
                            ]]
                    }
                }
            }
        });
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,