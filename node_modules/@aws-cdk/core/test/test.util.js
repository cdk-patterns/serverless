"use strict";
const nodeunit_1 = require("nodeunit");
const lib_1 = require("../lib");
const util_1 = require("../lib/util");
class SomeToken {
    constructor() {
        this.foo = 60;
        this.goo = 40;
    }
    resolve() {
        return this.foo + this.goo;
    }
}
class Nested extends lib_1.Stack {
    constructor(scope, id) {
        const resource = new lib_1.CfnResource(scope, `${id}+NestedStackResource`, { type: 'AWS::CloudFormation::Stack' });
        super(scope, id);
        this.nestedStackResource = resource;
    }
}
module.exports = nodeunit_1.testCase({
    'capitalizeResourceProperties capitalizes all keys of an object (recursively) from camelCase to PascalCase'(test) {
        const c = new lib_1.Stack();
        test.equal(util_1.capitalizePropertyNames(c, undefined), undefined);
        test.equal(util_1.capitalizePropertyNames(c, 12), 12);
        test.equal(util_1.capitalizePropertyNames(c, 'hello'), 'hello');
        test.deepEqual(util_1.capitalizePropertyNames(c, ['hello', 88]), ['hello', 88]);
        test.deepEqual(util_1.capitalizePropertyNames(c, { Hello: 'world', hey: 'dude' }), { Hello: 'world', Hey: 'dude' });
        test.deepEqual(util_1.capitalizePropertyNames(c, [1, 2, { three: 3 }]), [1, 2, { Three: 3 }]);
        test.deepEqual(util_1.capitalizePropertyNames(c, { Hello: 'world', recursive: { foo: 123, there: { another: ['hello', { world: 123 }] } } }), { Hello: 'world', Recursive: { Foo: 123, There: { Another: ['hello', { World: 123 }] } } });
        // make sure tokens are resolved and result is also capitalized
        test.deepEqual(util_1.capitalizePropertyNames(c, { hello: { resolve: () => ({ foo: 'bar' }) }, world: new SomeToken() }), { Hello: { Foo: 'bar' }, World: 100 });
        test.done();
    },
    'ignoreEmpty': {
        '[]'(test) {
            const stack = new lib_1.Stack();
            test.strictEqual(stack.resolve(util_1.ignoreEmpty([])), undefined);
            test.done();
        },
        '{}'(test) {
            const stack = new lib_1.Stack();
            test.strictEqual(stack.resolve(util_1.ignoreEmpty({})), undefined);
            test.done();
        },
        'undefined/null'(test) {
            const stack = new lib_1.Stack();
            test.strictEqual(stack.resolve(util_1.ignoreEmpty(undefined)), undefined);
            test.strictEqual(stack.resolve(util_1.ignoreEmpty(null)), null);
            test.done();
        },
        'primitives'(test) {
            const stack = new lib_1.Stack();
            test.strictEqual(stack.resolve(util_1.ignoreEmpty(12)), 12);
            test.strictEqual(stack.resolve(util_1.ignoreEmpty("12")), "12");
            test.done();
        },
        'non-empty arrays/objects'(test) {
            const stack = new lib_1.Stack();
            test.deepEqual(stack.resolve(util_1.ignoreEmpty([1, 2, 3, undefined])), [1, 2, 3]); // undefined array values is cleaned up by "resolve"
            test.deepEqual(stack.resolve(util_1.ignoreEmpty({ o: 1, b: 2, j: 3 })), { o: 1, b: 2, j: 3 });
            test.done();
        },
        'resolve first'(test) {
            const stack = new lib_1.Stack();
            test.deepEqual(stack.resolve(util_1.ignoreEmpty({ xoo: { resolve: () => 123 } })), { xoo: 123 });
            test.strictEqual(stack.resolve(util_1.ignoreEmpty({ xoo: { resolve: () => undefined } })), undefined);
            test.deepEqual(stack.resolve(util_1.ignoreEmpty({ xoo: { resolve: () => [] } })), { xoo: [] });
            test.deepEqual(stack.resolve(util_1.ignoreEmpty({ xoo: { resolve: () => [undefined, undefined] } })), { xoo: [] });
            test.done();
        }
    },
    'filterUnderined': {
        'is null-safe (aka treats null and undefined the same)'(test) {
            test.deepEqual(util_1.filterUndefined({ 'a null': null, 'a not null': true }), { 'a not null': true });
            test.done();
        },
        'removes undefined, but leaves the rest'(test) {
            test.deepEqual(util_1.filterUndefined({ 'an undefined': undefined, 'yes': true }), { yes: true });
            test.done();
        }
    },
    'pathToTopLevelStack returns the array of stacks that lead to a stack'(test) {
        const a = new lib_1.Stack(undefined, 'a');
        const aa = new Nested(a, 'aa');
        const aaa = new Nested(aa, 'aaa');
        test.deepEqual(path(aaa), ['a', 'aa', 'aaa']);
        test.deepEqual(path(aa), ['a', 'aa']);
        test.deepEqual(path(a), ['a']);
        test.done();
        function path(s) {
            return util_1.pathToTopLevelStack(s).map(x => x.node.id);
        }
    },
    'findCommonStack returns the lowest common stack between two stacks or undefined'(test) {
        const a = new lib_1.Stack(undefined, 'a');
        const aa = new Nested(a, 'aa');
        const ab = new Nested(a, 'ab');
        const aaa = new Nested(aa, 'aaa');
        const aab = new Nested(aa, 'aab');
        const aba = new Nested(ab, 'aba');
        const b = new lib_1.Stack(undefined, 'b');
        const ba = new Nested(b, 'ba');
        const baa = new Nested(ba, 'baa');
        test.equal(lca(a, b), undefined);
        test.equal(lca(aa, ab), 'a');
        test.equal(lca(ab, aa), 'a');
        test.equal(lca(aa, aba), 'a');
        test.equal(lca(aba, aa), 'a');
        test.equal(lca(ab, aba), 'ab');
        test.equal(lca(aba, ab), 'ab');
        test.equal(lca(aba, aba), 'aba');
        test.equal(lca(aa, aa), 'aa');
        test.equal(lca(a, aaa), 'a');
        test.equal(lca(aaa, aab), 'aa');
        test.equal(lca(aaa, b), undefined);
        test.equal(lca(aaa, ba), undefined);
        test.equal(lca(baa, ba), 'ba');
        test.done();
        function lca(s1, s2) {
            const res = util_1.findLastCommonElement(util_1.pathToTopLevelStack(s1), util_1.pathToTopLevelStack(s2));
            if (!res) {
                return undefined;
            }
            return res.node.id;
        }
    }
});
//# sourceMappingURL=data:application/json;base64,