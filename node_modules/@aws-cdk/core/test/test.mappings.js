"use strict";
const lib_1 = require("../lib");
const util_1 = require("./util");
module.exports = {
    'mappings can be added as another type of entity, and mapping.findInMap can be used to get a token'(test) {
        const stack = new lib_1.Stack();
        const mapping = new lib_1.CfnMapping(stack, 'MyMapping', { mapping: {
                TopLevelKey1: {
                    SecondLevelKey1: [1, 2, 3],
                    SecondLevelKey2: { Hello: 'World' }
                },
                TopLevelKey2: {
                    SecondLevelKey1: [99, 99, 99]
                }
            } });
        // findInMap can be used to take a reference
        new lib_1.CfnResource(stack, 'MyResource', {
            type: 'R',
            properties: {
                RefToValueInMap: mapping.findInMap('TopLevelKey1', 'SecondLevelKey1')
            }
        });
        test.throws(() => mapping.findInMap('NotFoundTopLevel', 'NotFound'), 'cant take a reference on a non existing key');
        test.throws(() => mapping.findInMap('TopLevelKey1', 'NotFound'), 'cant take a reference on a non existing key');
        // set value can be used to set/modify a specific value
        mapping.setValue('TopLevelKey2', 'SecondLevelKey2', 'Hi');
        mapping.setValue('TopLevelKey1', 'SecondLevelKey1', [1, 2, 3, 4]);
        test.deepEqual(util_1.toCloudFormation(stack), { Mappings: { MyMapping: { TopLevelKey1: { SecondLevelKey1: [1, 2, 3, 4],
                        SecondLevelKey2: { Hello: 'World' } },
                    TopLevelKey2: { SecondLevelKey1: [99, 99, 99], SecondLevelKey2: 'Hi' } } },
            Resources: { MyResource: { Type: 'R',
                    Properties: { RefToValueInMap: { 'Fn::FindInMap': ['MyMapping', 'TopLevelKey1', 'SecondLevelKey1'] } } } } });
        test.done();
    },
    'allow using unresolved tokens in find-in-map'(test) {
        const stack = new lib_1.Stack();
        const mapping = new lib_1.CfnMapping(stack, 'mapping', {
            mapping: {
                instanceCount: {
                    'us-east-1': 12
                }
            }
        });
        const v1 = mapping.findInMap('instanceCount', lib_1.Aws.REGION);
        const v2 = lib_1.Fn.findInMap(mapping.logicalId, 'instanceCount', lib_1.Aws.REGION);
        const expected = { 'Fn::FindInMap': ['mapping', 'instanceCount', { Ref: 'AWS::Region' }] };
        test.deepEqual(stack.resolve(v1), expected);
        test.deepEqual(stack.resolve(v2), expected);
        test.done();
    },
    'no validation if first key is token and second is a static string'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        const mapping = new lib_1.CfnMapping(stack, 'mapping', {
            mapping: {
                'us-east-1': {
                    size: 12
                }
            }
        });
        // WHEN
        const v = mapping.findInMap(lib_1.Aws.REGION, 'size');
        // THEN
        test.deepEqual(stack.resolve(v), {
            "Fn::FindInMap": ['mapping', { Ref: "AWS::Region" }, "size"]
        });
        test.done();
    },
    'validate first key if it is a string and second is a token'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        const mapping = new lib_1.CfnMapping(stack, 'mapping', {
            mapping: {
                size: {
                    'us-east-1': 12
                }
            }
        });
        // WHEN
        const v = mapping.findInMap('size', lib_1.Aws.REGION);
        // THEN
        test.throws(() => mapping.findInMap('not-found', lib_1.Aws.REGION), /Mapping doesn't contain top-level key 'not-found'/);
        test.deepEqual(stack.resolve(v), { 'Fn::FindInMap': ['mapping', 'size', { Ref: 'AWS::Region' }] });
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,