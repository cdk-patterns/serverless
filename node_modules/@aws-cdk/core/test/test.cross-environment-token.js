"use strict";
const lib_1 = require("../lib");
const util_1 = require("./util");
class MyResource extends lib_1.Resource {
    constructor(scope, id, physicalName) {
        super(scope, id, { physicalName });
        this.arn = this.getResourceArnAttribute('simple-arn', {
            region: '',
            account: '',
            resource: 'my-resource',
            resourceName: this.physicalName,
            service: 'myservice',
        });
        this.name = this.getResourceNameAttribute('simple-name');
        new lib_1.CfnResource(this, 'Resource', {
            type: 'My::Resource',
            properties: {
                resourceName: this.physicalName
            }
        });
    }
}
module.exports = {
    'CrossEnvironmentToken': {
        'can reference an ARN with a fixed physical name directly in a different account'(test) {
            // GIVEN
            const app = new lib_1.App();
            const stack1 = new lib_1.Stack(app, 'Stack1', {
                env: {
                    account: '123456789012',
                    region: 'bermuda-triangle-1337',
                },
            });
            const myResource = new MyResource(stack1, 'MyResource', 'PhysicalName');
            const stack2 = new lib_1.Stack(app, 'Stack2', {
                env: {
                    account: '234567890123',
                    region: 'bermuda-triangle-42',
                },
            });
            // WHEN
            new lib_1.CfnOutput(stack2, 'Output', {
                value: myResource.arn,
            });
            // THEN
            test.deepEqual(util_1.toCloudFormation(stack2), {
                Outputs: {
                    Output: {
                        Value: {
                            'Fn::Join': [
                                '',
                                [
                                    'arn:',
                                    {
                                        Ref: 'AWS::Partition',
                                    },
                                    ':myservice:::my-resource/PhysicalName',
                                ],
                            ],
                        },
                    },
                },
            });
            test.done();
        },
        'can reference a fixed physical name directly in a different account'(test) {
            // GIVEN
            const app = new lib_1.App();
            const stack1 = new lib_1.Stack(app, 'Stack1', {
                env: {
                    account: '123456789012',
                    region: 'bermuda-triangle-1337',
                },
            });
            const stack2 = new lib_1.Stack(app, 'Stack2', {
                env: {
                    account: '234567890123',
                    region: 'bermuda-triangle-42',
                },
            });
            // WHEN
            const myResource = new MyResource(stack1, 'MyResource', 'PhysicalName');
            new lib_1.CfnOutput(stack2, 'Output', {
                value: myResource.name,
            });
            // THEN
            test.deepEqual(util_1.toCloudFormation(stack2), {
                Outputs: {
                    Output: {
                        Value: 'PhysicalName',
                    },
                },
            });
            test.done();
        },
        'can reference an ARN with an assigned physical name directly in a different account'(test) {
            // GIVEN
            const app = new lib_1.App();
            const stack1 = new lib_1.Stack(app, 'Stack1', {
                env: {
                    account: '123456789012',
                    region: 'bermuda-triangle-1337',
                },
            });
            const myResource = new MyResource(stack1, 'MyResource', lib_1.PhysicalName.GENERATE_IF_NEEDED);
            const stack2 = new lib_1.Stack(app, 'Stack2', {
                env: {
                    account: '234567890123',
                    region: 'bermuda-triangle-42',
                },
            });
            // WHEN
            new lib_1.CfnOutput(stack2, 'Output', {
                value: myResource.arn,
            });
            // THEN
            test.deepEqual(util_1.toCloudFormation(stack2), {
                Outputs: {
                    Output: {
                        Value: {
                            'Fn::Join': [
                                '',
                                [
                                    'arn:',
                                    {
                                        Ref: 'AWS::Partition',
                                    },
                                    ':myservice:::my-resource/stack1stack1myresourcec54ced43683ebf9a3c4c',
                                ],
                            ],
                        },
                    },
                },
            });
            test.done();
        },
        'can reference an assigned physical name directly in a different account'(test) {
            // GIVEN
            const app = new lib_1.App();
            const stack1 = new lib_1.Stack(app, 'Stack1', {
                env: {
                    account: '123456789012',
                    region: 'bermuda-triangle-1337',
                },
            });
            const stack2 = new lib_1.Stack(app, 'Stack2', {
                env: {
                    account: '234567890123',
                    region: 'bermuda-triangle-42',
                },
            });
            // WHEN
            const myResource = new MyResource(stack1, 'MyResource', lib_1.PhysicalName.GENERATE_IF_NEEDED);
            new lib_1.CfnOutput(stack2, 'Output', {
                value: myResource.name,
            });
            // THEN
            test.deepEqual(util_1.toCloudFormation(stack2), {
                Outputs: {
                    Output: {
                        Value: 'stack1stack1myresourcec54ced43683ebf9a3c4c',
                    },
                },
            });
            test.done();
        },
    },
    'cannot reference a deploy-time physical name across environments'(test) {
        // GIVEN
        const app = new lib_1.App();
        const stack1 = new lib_1.Stack(app, 'Stack1', {
            env: {
                account: '123456789012',
                region: 'bermuda-triangle-1337',
            },
        });
        const stack2 = new lib_1.Stack(app, 'Stack2', {
            env: {
                account: '234567890123',
                region: 'bermuda-triangle-42',
            },
        });
        // WHEN
        const myResource = new MyResource(stack1, 'MyResource');
        new lib_1.CfnOutput(stack2, 'Output', {
            value: myResource.name,
        });
        // THEN
        test.throws(() => util_1.toCloudFormation(stack2), /Cannot use resource 'Stack1\/MyResource' in a cross-environment fashion/);
        test.done();
    },
    'cross environment when stack is a substack'(test) {
        const app = new lib_1.App();
        const parentStack = new lib_1.Stack(app, 'ParentStack', {
            env: { account: '112233', region: 'us-east-1' }
        });
        const childStack = new lib_1.Stack(parentStack, 'ChildStack', {
            env: { account: '998877', region: 'eu-west-2' }
        });
        const childResource = new MyResource(childStack, 'ChildResource', lib_1.PhysicalName.GENERATE_IF_NEEDED);
        new lib_1.CfnResource(parentStack, 'ParentResource', {
            type: 'Parent::Resource',
            properties: {
                RefToChildResource: childResource.name
            }
        });
        const assembly = app.synth();
        test.deepEqual(assembly.getStackByName(parentStack.stackName).template, {
            Resources: {
                ParentResource: {
                    Type: 'Parent::Resource',
                    Properties: {
                        RefToChildResource: 'parentstackchildstack83c5ackchildresource852877eeb919bda2008e'
                    }
                }
            }
        });
        test.deepEqual(assembly.getStackByName(childStack.stackName).template, {
            Resources: {
                ChildResource8C37244D: {
                    Type: 'My::Resource',
                    Properties: {
                        resourceName: 'parentstackchildstack83c5ackchildresource852877eeb919bda2008e'
                    }
                }
            }
        });
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,