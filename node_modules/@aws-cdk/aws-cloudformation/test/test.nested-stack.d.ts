import { Test } from 'nodeunit';
declare const _default: {
    'fails if defined as a root'(test: Test): void;
    'fails if defined without a parent stack'(test: Test): void;
    'can be defined as a direct child or an indirect child of a Stack'(test: Test): void;
    'nested stack is not synthesized as a stack artifact into the assembly'(test: Test): void;
    'the template of the nested stack is synthesized into the cloud assembly'(test: Test): void;
    'file asset metadata is associated with the parent stack'(test: Test): void;
    'aws::cloudformation::stack is synthesized in the parent scope'(test: Test): void;
    'Stack.of()'(test: Test): void;
    'references within the nested stack are not reported as cross stack references'(test: Test): void;
    'references to a resource from the parent stack in a nested stack is translated into a cfn parameter'(test: Test): void;
    'references to a resource in the nested stack in the parent is translated into a cfn output'(test: Test): void;
    'nested stack references a resource from another non-nested stack (not the parent)'(test: Test): void;
    'another non-nested stack takes a reference on a resource within the nested stack (the parent exports)'(test: Test): void;
    'references between sibling nested stacks should output from one and getAtt from the other'(test: Test): void;
    'stackId returns AWS::StackId when referenced from the context of the nested stack'(test: Test): void;
    'stackId returns the REF of the CloudFormation::Stack resource when referenced from the parent stack'(test: Test): void;
    'stackName returns AWS::StackName when referenced from the context of the nested stack'(test: Test): void;
    'stackName returns the REF of the CloudFormation::Stack resource when referenced from the parent stack'(test: Test): void;
    '"account", "region" and "environment" are all derived from the parent'(test: Test): void;
    'double-nested stack'(test: Test): void;
    'assets within nested stacks are proxied from the parent'(test: Test): void;
    'docker image assets are wired through the top-level stack'(test: Test): void;
    'metadata defined in nested stacks is reported at the parent stack level in the cloud assembly'(test: Test): void;
    'referencing attributes with period across stacks'(test: Test): void;
    'missing context in nested stack is reported if the context is not available'(test: Test): void;
};
export = _default;
