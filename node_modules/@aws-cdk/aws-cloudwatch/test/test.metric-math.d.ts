import { Test } from 'nodeunit';
declare const _default: {
    'setUp'(cb: () => void): void;
    'can not use invalid variable names in MathExpression'(test: Test): void;
    'cannot reuse variable names in nested MathExpressions'(test: Test): void;
    'can not use invalid period in MathExpression'(test: Test): void;
    'MathExpression optimization: "with" with the same period returns the same object'(test: Test): void;
    'in graphs': {
        'MathExpressions can be added to a graph'(test: Test): void;
        'can nest MathExpressions in a graph'(test: Test): void;
        'can add the same metric under different ids'(test: Test): void;
        'can reuse identifiers in MathExpressions if metrics are the same'(test: Test): void;
        'MathExpression and its constituent metrics can both be added to a graph'(test: Test): void;
        'MathExpression controls period of metrics directly used in it'(test: Test): void;
        'MathExpression controls period of metrics transitively used in it'(test: Test): void;
        'can use percentiles in expression metrics in graphs'(test: Test): void;
    };
    'in alarms': {
        'MathExpressions can be used for an alarm'(test: Test): void;
        'can nest MathExpressions in an alarm'(test: Test): void;
        'MathExpression controls period of metrics transitively used in it with alarms'(test: Test): void;
        'annotation for a mathexpression alarm is calculated based upon constituent metrics'(test: Test): void;
        'can use percentiles in expression metrics in alarms'(test: Test): void;
    };
};
export = _default;
