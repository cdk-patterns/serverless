"use strict";
const assert_1 = require("@aws-cdk/assert");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
const a = new lib_1.Metric({ namespace: 'Test', metricName: 'ACount' });
let stack1;
let stack2;
function graphMetricsAre(test, stack, w, metrics) {
    test.deepEqual(stack.resolve(w.toJson()), [{
            type: 'metric',
            width: 6,
            height: 6,
            properties: { view: 'timeSeries',
                region: { Ref: 'AWS::Region' },
                metrics,
                yAxis: {} }
        }]);
}
module.exports = {
    'setUp'(cb) {
        stack1 = new core_1.Stack(undefined, undefined, { env: { region: 'pluto', account: '1234' } });
        stack2 = new core_1.Stack(undefined, undefined, { env: { region: 'mars', account: '5678' } });
        cb();
    },
    'in graphs': {
        'metric attached to stack1 will not render region and account in stack1'(test) {
            // GIVEN
            const graph = new lib_1.GraphWidget({
                left: [
                    a.attachTo(stack1)
                ],
            });
            // THEN
            graphMetricsAre(test, stack1, graph, [
                ['Test', 'ACount'],
            ]);
            test.done();
        },
        'metric attached to stack1 will render region and account in stack2'(test) {
            // GIVEN
            const graph = new lib_1.GraphWidget({
                left: [
                    a.attachTo(stack1)
                ],
            });
            // THEN
            graphMetricsAre(test, stack2, graph, [
                ['Test', 'ACount', { region: 'pluto', accountId: '1234' }],
            ]);
            test.done();
        },
        'metric with explicit account and region will render in environment agnostic stack'(test) {
            // GIVEN
            const graph = new lib_1.GraphWidget({
                left: [
                    a.with({ account: '1234', region: 'us-north-5' })
                ],
            });
            // THEN
            graphMetricsAre(test, new core_1.Stack(), graph, [
                ['Test', 'ACount', { accountId: '1234', region: 'us-north-5' }],
            ]);
            test.done();
        },
        'metric attached to agnostic stack will not render in agnostic stack'(test) {
            // GIVEN
            const graph = new lib_1.GraphWidget({
                left: [
                    a.attachTo(new core_1.Stack()),
                ],
            });
            // THEN
            graphMetricsAre(test, new core_1.Stack(), graph, [
                ['Test', 'ACount'],
            ]);
            test.done();
        },
    },
    'in alarms': {
        'metric attached to stack1 will not render region and account in stack1'(test) {
            // GIVEN
            new lib_1.Alarm(stack1, 'Alarm', {
                threshold: 1, evaluationPeriods: 1,
                metric: a.attachTo(stack1),
            });
            // THEN
            assert_1.expect(stack1).to(assert_1.haveResourceLike('AWS::CloudWatch::Alarm', {
                MetricName: "ACount",
                Namespace: "Test",
                Period: 300,
            }));
            test.done();
        },
        'metric attached to stack1 will throw in stack2'(test) {
            // Cross-region/cross-account metrics are supported in Dashboards but not in Alarms
            // GIVEN
            test.throws(() => {
                new lib_1.Alarm(stack2, 'Alarm', {
                    threshold: 1, evaluationPeriods: 1,
                    metric: a.attachTo(stack1),
                });
            }, /Cannot create an Alarm in region 'mars' based on metric 'ACount' in 'pluto'/);
            test.done();
        },
    }
};
//# sourceMappingURL=data:application/json;base64,