"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Statistic to use over the aggregation period
 */
var Statistic;
(function (Statistic) {
    Statistic["SAMPLE_COUNT"] = "SampleCount";
    Statistic["AVERAGE"] = "Average";
    Statistic["SUM"] = "Sum";
    Statistic["MINIMUM"] = "Minimum";
    Statistic["MAXIMUM"] = "Maximum";
})(Statistic = exports.Statistic || (exports.Statistic = {}));
/**
 * Unit for metric
 */
var Unit;
(function (Unit) {
    Unit["SECONDS"] = "Seconds";
    Unit["MICROSECONDS"] = "Microseconds";
    Unit["MILLISECONDS"] = "Milliseconds";
    Unit["BYTES"] = "Bytes";
    Unit["KILOBYTES"] = "Kilobytes";
    Unit["MEGABYTES"] = "Megabytes";
    Unit["GIGABYTES"] = "Gigabytes";
    Unit["TERABYTES"] = "Terabytes";
    Unit["BITS"] = "Bits";
    Unit["KILOBITS"] = "Kilobits";
    Unit["MEGABITS"] = "Megabits";
    Unit["GIGABITS"] = "Gigabits";
    Unit["TERABITS"] = "Terabits";
    Unit["PERCENT"] = "Percent";
    Unit["COUNT"] = "Count";
    Unit["BYTES_PER_SECOND"] = "Bytes/Second";
    Unit["KILOBYTES_PER_SECOND"] = "Kilobytes/Second";
    Unit["MEGABYTES_PER_SECOND"] = "Megabytes/Second";
    Unit["GIGABYTES_PER_SECOND"] = "Gigabytes/Second";
    Unit["TERABYTES_PER_SECOND"] = "Terabytes/Second";
    Unit["BITS_PER_SECOND"] = "Bits/Second";
    Unit["KILOBITS_PER_SECOND"] = "Kilobits/Second";
    Unit["MEGABITS_PER_SECOND"] = "Megabits/Second";
    Unit["GIGABITS_PER_SECOND"] = "Gigabits/Second";
    Unit["TERABITS_PER_SECOND"] = "Terabits/Second";
    Unit["COUNT_PER_SECOND"] = "Count/Second";
    Unit["NONE"] = "None";
})(Unit = exports.Unit || (exports.Unit = {}));
//# sourceMappingURL=data:application/json;base64,