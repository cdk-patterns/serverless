"use strict";
const AWSXRay = require('aws-xray-sdk');
const AWS = AWSXRay.captureAWS(require('aws-sdk'));
exports.handler = async function (event) {
    const segment = AWSXRay.getSegment(); //returns the facade segment
    console.log("request:", JSON.stringify(event, undefined, 2));
    const dynamoSegment = segment.addNewSubsegment('DynamoDB Query');
    // create AWS SDK clients
    const dynamo = new AWS.DynamoDB();
    let path = event.Records[0].Sns.Message;
    dynamoSegment.addAnnotation("path", path);
    dynamoSegment.addMetadata("event", event);
    // update dynamo entry for "path" with hits++
    await dynamo.updateItem({
        TableName: process.env.HITS_TABLE_NAME,
        Key: { path: { S: path } },
        UpdateExpression: 'ADD hits :incr',
        ExpressionAttributeValues: { ':incr': { N: '1' } }
    }).promise();
    console.log('inserted counter for ' + path);
    dynamoSegment.close();
    // return response back to upstream caller
    return { "status": "success" };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1vLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZHluYW1vLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDeEMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUVuRCxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssV0FBVSxLQUFTO0lBQ3hDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLDRCQUE0QjtJQUNsRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU3RCxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNqRSx5QkFBeUI7SUFDekIsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbEMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO0lBRXhDLGFBQWEsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBRXpDLDZDQUE2QztJQUM3QyxNQUFNLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDdEIsU0FBUyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZTtRQUN0QyxHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDMUIsZ0JBQWdCLEVBQUUsZ0JBQWdCO1FBQ2xDLHlCQUF5QixFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFO0tBQ25ELENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUViLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEdBQUUsSUFBSSxDQUFDLENBQUM7SUFFM0MsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRXRCLDBDQUEwQztJQUMxQyxPQUFPLEVBQUMsUUFBUSxFQUFFLFNBQVMsRUFBQyxDQUFDO0FBQy9CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFXU1hSYXkgPSByZXF1aXJlKCdhd3MteHJheS1zZGsnKTtcbmNvbnN0IEFXUyA9IEFXU1hSYXkuY2FwdHVyZUFXUyhyZXF1aXJlKCdhd3Mtc2RrJykpO1xuXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyBmdW5jdGlvbihldmVudDphbnkpIHtcbiAgY29uc3Qgc2VnbWVudCA9IEFXU1hSYXkuZ2V0U2VnbWVudCgpOyAvL3JldHVybnMgdGhlIGZhY2FkZSBzZWdtZW50XG4gIGNvbnNvbGUubG9nKFwicmVxdWVzdDpcIiwgSlNPTi5zdHJpbmdpZnkoZXZlbnQsIHVuZGVmaW5lZCwgMikpO1xuXG4gIGNvbnN0IGR5bmFtb1NlZ21lbnQgPSBzZWdtZW50LmFkZE5ld1N1YnNlZ21lbnQoJ0R5bmFtb0RCIFF1ZXJ5Jyk7XG4gIC8vIGNyZWF0ZSBBV1MgU0RLIGNsaWVudHNcbiAgY29uc3QgZHluYW1vID0gbmV3IEFXUy5EeW5hbW9EQigpO1xuICBsZXQgcGF0aCA9IGV2ZW50LlJlY29yZHNbMF0uU25zLk1lc3NhZ2U7XG5cbiAgZHluYW1vU2VnbWVudC5hZGRBbm5vdGF0aW9uKFwicGF0aFwiLCBwYXRoKTtcbiAgZHluYW1vU2VnbWVudC5hZGRNZXRhZGF0YShcImV2ZW50XCIsIGV2ZW50KVxuXG4gIC8vIHVwZGF0ZSBkeW5hbW8gZW50cnkgZm9yIFwicGF0aFwiIHdpdGggaGl0cysrXG4gIGF3YWl0IGR5bmFtby51cGRhdGVJdGVtKHtcbiAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LkhJVFNfVEFCTEVfTkFNRSxcbiAgICBLZXk6IHsgcGF0aDogeyBTOiBwYXRoIH0gfSxcbiAgICBVcGRhdGVFeHByZXNzaW9uOiAnQUREIGhpdHMgOmluY3InLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHsgJzppbmNyJzogeyBOOiAnMScgfSB9XG4gIH0pLnByb21pc2UoKTtcblxuICBjb25zb2xlLmxvZygnaW5zZXJ0ZWQgY291bnRlciBmb3IgJysgcGF0aCk7XG5cbiAgZHluYW1vU2VnbWVudC5jbG9zZSgpO1xuXG4gIC8vIHJldHVybiByZXNwb25zZSBiYWNrIHRvIHVwc3RyZWFtIGNhbGxlclxuICByZXR1cm4ge1wic3RhdHVzXCI6IFwic3VjY2Vzc1wifTtcbn07Il19