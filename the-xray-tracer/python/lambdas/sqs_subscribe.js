"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWSXRay = require('aws-xray-sdk');
exports.handler = async function (event) {
    console.log("request:", JSON.stringify(event, undefined, 2));
    let records = event.Records;
    for (let index in records) {
        // Try and get our trace information associated to the right parent
        let traceHeaderStr = records[index].attributes.AWSTraceHeader;
        let traceData = AWSXRay.utils.processTraceData(traceHeaderStr);
        const segment = new AWSXRay.Segment('Logging SQS Message', traceData.Root, traceData.Parent);
        AWSXRay.middleware.resolveSampling(traceData, segment);
        console.log('received message ' + records[index].body);
        segment.addMetadata("message", records[index].body);
        segment.close();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3FzX3N1YnNjcmliZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNxc19zdWJzY3JpYmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFeEMsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLFdBQVUsS0FBUztJQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU3RCxJQUFJLE9BQU8sR0FBVSxLQUFLLENBQUMsT0FBTyxDQUFDO0lBRW5DLEtBQUksSUFBSSxLQUFLLElBQUksT0FBTyxFQUFFO1FBRXhCLG1FQUFtRTtRQUNuRSxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQztRQUM5RCxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxTQUFTLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3RixPQUFPLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdkQsT0FBTyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRW5ELE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUNqQjtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7fTtcbmNvbnN0IEFXU1hSYXkgPSByZXF1aXJlKCdhd3MteHJheS1zZGsnKTtcblxuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgZnVuY3Rpb24oZXZlbnQ6YW55KSB7XG4gIGNvbnNvbGUubG9nKFwicmVxdWVzdDpcIiwgSlNPTi5zdHJpbmdpZnkoZXZlbnQsIHVuZGVmaW5lZCwgMikpO1xuXG4gIGxldCByZWNvcmRzOiBhbnlbXSA9IGV2ZW50LlJlY29yZHM7XG4gIFxuICBmb3IobGV0IGluZGV4IGluIHJlY29yZHMpIHtcblxuICAgIC8vIFRyeSBhbmQgZ2V0IG91ciB0cmFjZSBpbmZvcm1hdGlvbiBhc3NvY2lhdGVkIHRvIHRoZSByaWdodCBwYXJlbnRcbiAgICBsZXQgdHJhY2VIZWFkZXJTdHIgPSByZWNvcmRzW2luZGV4XS5hdHRyaWJ1dGVzLkFXU1RyYWNlSGVhZGVyO1xuICAgIGxldCB0cmFjZURhdGEgPSBBV1NYUmF5LnV0aWxzLnByb2Nlc3NUcmFjZURhdGEodHJhY2VIZWFkZXJTdHIpO1xuICAgIGNvbnN0IHNlZ21lbnQgPSBuZXcgQVdTWFJheS5TZWdtZW50KCdMb2dnaW5nIFNRUyBNZXNzYWdlJywgdHJhY2VEYXRhLlJvb3QsIHRyYWNlRGF0YS5QYXJlbnQpO1xuICAgIEFXU1hSYXkubWlkZGxld2FyZS5yZXNvbHZlU2FtcGxpbmcodHJhY2VEYXRhLCBzZWdtZW50KTtcbiAgICBjb25zb2xlLmxvZygncmVjZWl2ZWQgbWVzc2FnZSAnICsgcmVjb3Jkc1tpbmRleF0uYm9keSk7ICBcblxuICAgIHNlZ21lbnQuYWRkTWV0YWRhdGEoXCJtZXNzYWdlXCIsIHJlY29yZHNbaW5kZXhdLmJvZHkpXG5cbiAgICBzZWdtZW50LmNsb3NlKCk7XG4gIH1cbn07Il19