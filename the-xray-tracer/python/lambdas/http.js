"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWSXRay = require('aws-xray-sdk');
var https = AWSXRay.captureHTTPs(require('https'));
exports.handler = async function (event) {
    const segment = AWSXRay.getSegment(); //returns the facade segment
    console.log("request:", JSON.stringify(event, undefined, 2));
    if (Math.random() < 0.4) {
        throw new Error("SSL Cert Exception");
    }
    const subsegment = segment.addNewSubsegment('external HTTP Request');
    let response = await new Promise((resolve, reject) => {
        let dataString = '';
        // Make a call to a webservice
        const req = https.get("https://jsonplaceholder.typicode.com/todos/1", (res) => {
            console.log(`statusCode: ${res.statusCode}`);
            res.on('data', (chunk) => {
                dataString += chunk;
            });
            res.on('end', () => {
                resolve({
                    data: JSON.parse(dataString)
                });
            });
        });
        req.on('error', (e) => {
            reject(e);
        });
    });
    console.log(response);
    subsegment.addMetadata("response", response);
    subsegment.close();
    // return response back to upstream caller
    return { response: response };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImh0dHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDeEMsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUVuRCxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssV0FBVSxLQUFTO0lBQ3hDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLDRCQUE0QjtJQUNsRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU3RCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLEVBQUU7UUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0tBQ3ZDO0lBRUQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFFckUsSUFBSSxRQUFRLEdBQUcsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQVcsRUFBRSxNQUFVLEVBQUUsRUFBRTtRQUMzRCxJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDcEIsOEJBQThCO1FBQzlCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsOENBQThDLEVBQUUsQ0FBQyxHQUFPLEVBQUUsRUFBRTtZQUM5RSxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7WUFFN0MsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFTLEVBQUUsRUFBRTtnQkFDekIsVUFBVSxJQUFJLEtBQUssQ0FBQztZQUN4QixDQUFDLENBQUMsQ0FBQztZQUVILEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRTtnQkFDZixPQUFPLENBQUM7b0JBQ0osSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDO2lCQUMvQixDQUFDLENBQUE7WUFDTixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO1FBRUgsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFLLEVBQUUsRUFBRTtZQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDYixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN0QixVQUFVLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUM1QyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFbkIsMENBQTBDO0lBQzFDLE9BQU8sRUFBQyxRQUFRLEVBQUUsUUFBUSxFQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHt9O1xuY29uc3QgQVdTWFJheSA9IHJlcXVpcmUoJ2F3cy14cmF5LXNkaycpO1xudmFyIGh0dHBzID0gQVdTWFJheS5jYXB0dXJlSFRUUHMocmVxdWlyZSgnaHR0cHMnKSk7XG5cbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIGZ1bmN0aW9uKGV2ZW50OmFueSkge1xuICBjb25zdCBzZWdtZW50ID0gQVdTWFJheS5nZXRTZWdtZW50KCk7IC8vcmV0dXJucyB0aGUgZmFjYWRlIHNlZ21lbnRcbiAgY29uc29sZS5sb2coXCJyZXF1ZXN0OlwiLCBKU09OLnN0cmluZ2lmeShldmVudCwgdW5kZWZpbmVkLCAyKSk7XG5cbiAgaWYgKE1hdGgucmFuZG9tKCkgPCAwLjQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTU0wgQ2VydCBFeGNlcHRpb25cIik7XG4gIH1cblxuICBjb25zdCBzdWJzZWdtZW50ID0gc2VnbWVudC5hZGROZXdTdWJzZWdtZW50KCdleHRlcm5hbCBIVFRQIFJlcXVlc3QnKTtcbiAgXG4gIGxldCByZXNwb25zZSA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlOmFueSwgcmVqZWN0OmFueSkgPT4ge1xuICAgIGxldCBkYXRhU3RyaW5nID0gJyc7XG4gICAgLy8gTWFrZSBhIGNhbGwgdG8gYSB3ZWJzZXJ2aWNlXG4gICAgY29uc3QgcmVxID0gaHR0cHMuZ2V0KFwiaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3RvZG9zLzFcIiwgKHJlczphbnkpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYHN0YXR1c0NvZGU6ICR7cmVzLnN0YXR1c0NvZGV9YCk7XG5cbiAgICAgICAgcmVzLm9uKCdkYXRhJywgKGNodW5rOmFueSkgPT4ge1xuICAgICAgICAgICAgZGF0YVN0cmluZyArPSBjaHVuaztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVzLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnBhcnNlKGRhdGFTdHJpbmcpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJlcS5vbignZXJyb3InLCAoZTphbnkpID0+IHtcbiAgICAgICAgcmVqZWN0KGUpXG4gICAgfSk7XG4gIH0pO1xuXG4gIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgc3Vic2VnbWVudC5hZGRNZXRhZGF0YShcInJlc3BvbnNlXCIsIHJlc3BvbnNlKVxuICBzdWJzZWdtZW50LmNsb3NlKCk7XG5cbiAgLy8gcmV0dXJuIHJlc3BvbnNlIGJhY2sgdG8gdXBzdHJlYW0gY2FsbGVyXG4gIHJldHVybiB7cmVzcG9uc2U6IHJlc3BvbnNlfTtcbn07Il19