"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const { DynamoDB } = require('aws-sdk');
/* input example:
 *  { trip_id: some_guid,
 *    depart: london,
 *    depart_at: some_date,
 *    arrive: dublin,
 *    arrive_at: some_date,
 *    hotel: holiday inn,
 *    check_in: some_date,
 *    check_out: some_date,
 *    rental: volvo,
 *    rental_from: some_date,
 *    rental_to: some_date
 *  }
 */
exports.handler = async function (event) {
    console.log("request:", JSON.stringify(event, undefined, 2));
    let hotelBookingID = hashCode('' + event.trip_id + event.hotel + event.check_in);
    // If we passed the parameter to fail this step 
    if (event.run_type === 'failHotelReservation') {
        throw new Error("Failed to reserve the hotel");
    }
    // create AWS SDK clients
    const dynamo = new DynamoDB();
    var params = {
        TableName: process.env.TABLE_NAME,
        Item: {
            'pk': { S: event.trip_id },
            'sk': { S: 'HOTEL#' + hotelBookingID },
            'trip_id': { S: event.trip_id },
            'type': { S: 'Hotel' },
            'id': { S: hotelBookingID },
            'hotel': { S: event.hotel },
            'check_in': { S: event.check_in },
            'check_out': { S: event.check_out },
            'transaction_status': { S: 'pending' }
        }
    };
    // Call DynamoDB to add the item to the table
    let result = await dynamo.putItem(params).promise().catch((error) => {
        throw new Error(error);
    });
    console.log('inserted hotel booking:');
    console.log(result);
    // return status of ok
    return {
        status: "ok",
        booking_id: hotelBookingID
    };
};
function hashCode(s) {
    let h;
    for (let i = 0; i < s.length; i++) {
        h = Math.imul(31, h) + s.charCodeAt(i) | 0;
    }
    return '' + Math.abs(h);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXJ2ZUhvdGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVzZXJ2ZUhvdGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUd4Qzs7Ozs7Ozs7Ozs7OztHQWFHO0FBQ0gsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLFdBQVUsS0FBUztJQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU3RCxJQUFJLGNBQWMsR0FBRyxRQUFRLENBQUMsRUFBRSxHQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUMsS0FBSyxDQUFDLEtBQUssR0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFM0UsZ0RBQWdEO0lBQ2hELElBQUcsS0FBSyxDQUFDLFFBQVEsS0FBSyxzQkFBc0IsRUFBQztRQUMzQyxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7S0FDaEQ7SUFFRCx5QkFBeUI7SUFDekIsTUFBTSxNQUFNLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztJQUU5QixJQUFJLE1BQU0sR0FBRztRQUNYLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVU7UUFDakMsSUFBSSxFQUFFO1lBQ0osSUFBSSxFQUFHLEVBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUM7WUFDekIsSUFBSSxFQUFHLEVBQUMsQ0FBQyxFQUFFLFFBQVEsR0FBQyxjQUFjLEVBQUM7WUFDbkMsU0FBUyxFQUFHLEVBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUM7WUFDOUIsTUFBTSxFQUFFLEVBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBQztZQUNwQixJQUFJLEVBQUUsRUFBQyxDQUFDLEVBQUUsY0FBYyxFQUFDO1lBQ3pCLE9BQU8sRUFBRyxFQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFDO1lBQzFCLFVBQVUsRUFBRSxFQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFDO1lBQy9CLFdBQVcsRUFBRSxFQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsU0FBUyxFQUFDO1lBQ2pDLG9CQUFvQixFQUFFLEVBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBQztTQUNyQztLQUNGLENBQUM7SUFFRiw2Q0FBNkM7SUFDN0MsSUFBSSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1FBQ3ZFLE1BQU0sSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekIsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVwQixzQkFBc0I7SUFDdEIsT0FBTztRQUNMLE1BQU0sRUFBRSxJQUFJO1FBQ1osVUFBVSxFQUFFLGNBQWM7S0FDM0IsQ0FBQTtBQUNILENBQUMsQ0FBQztBQUVGLFNBQVMsUUFBUSxDQUFDLENBQVE7SUFDeEIsSUFBSSxDQUFLLENBQUM7SUFFVixLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBQztRQUMvQixDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDNUM7SUFFRCxPQUFPLEVBQUUsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IER5bmFtb0RCIH0gPSByZXF1aXJlKCdhd3Mtc2RrJyk7XG5leHBvcnQge307XG5cbi8qIGlucHV0IGV4YW1wbGU6XG4gKiAgeyB0cmlwX2lkOiBzb21lX2d1aWQsXG4gKiAgICBkZXBhcnQ6IGxvbmRvbixcbiAqICAgIGRlcGFydF9hdDogc29tZV9kYXRlLFxuICogICAgYXJyaXZlOiBkdWJsaW4sXG4gKiAgICBhcnJpdmVfYXQ6IHNvbWVfZGF0ZSxcbiAqICAgIGhvdGVsOiBob2xpZGF5IGlubixcbiAqICAgIGNoZWNrX2luOiBzb21lX2RhdGUsXG4gKiAgICBjaGVja19vdXQ6IHNvbWVfZGF0ZSxcbiAqICAgIHJlbnRhbDogdm9sdm8sXG4gKiAgICByZW50YWxfZnJvbTogc29tZV9kYXRlLFxuICogICAgcmVudGFsX3RvOiBzb21lX2RhdGVcbiAqICB9XG4gKi9cbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIGZ1bmN0aW9uKGV2ZW50OmFueSkge1xuICBjb25zb2xlLmxvZyhcInJlcXVlc3Q6XCIsIEpTT04uc3RyaW5naWZ5KGV2ZW50LCB1bmRlZmluZWQsIDIpKTtcblxuICBsZXQgaG90ZWxCb29raW5nSUQgPSBoYXNoQ29kZSgnJytldmVudC50cmlwX2lkK2V2ZW50LmhvdGVsK2V2ZW50LmNoZWNrX2luKTtcblxuICAvLyBJZiB3ZSBwYXNzZWQgdGhlIHBhcmFtZXRlciB0byBmYWlsIHRoaXMgc3RlcCBcbiAgaWYoZXZlbnQucnVuX3R5cGUgPT09ICdmYWlsSG90ZWxSZXNlcnZhdGlvbicpe1xuICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byByZXNlcnZlIHRoZSBob3RlbFwiKTtcbiAgfVxuXG4gIC8vIGNyZWF0ZSBBV1MgU0RLIGNsaWVudHNcbiAgY29uc3QgZHluYW1vID0gbmV3IER5bmFtb0RCKCk7XG5cbiAgdmFyIHBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRBQkxFX05BTUUsXG4gICAgSXRlbToge1xuICAgICAgJ3BrJyA6IHtTOiBldmVudC50cmlwX2lkfSxcbiAgICAgICdzaycgOiB7UzogJ0hPVEVMIycraG90ZWxCb29raW5nSUR9LFxuICAgICAgJ3RyaXBfaWQnIDoge1M6IGV2ZW50LnRyaXBfaWR9LFxuICAgICAgJ3R5cGUnOiB7UzogJ0hvdGVsJ30sXG4gICAgICAnaWQnOiB7UzogaG90ZWxCb29raW5nSUR9LFxuICAgICAgJ2hvdGVsJyA6IHtTOiBldmVudC5ob3RlbH0sXG4gICAgICAnY2hlY2tfaW4nOiB7UzogZXZlbnQuY2hlY2tfaW59LFxuICAgICAgJ2NoZWNrX291dCc6IHtTOiBldmVudC5jaGVja19vdXR9LFxuICAgICAgJ3RyYW5zYWN0aW9uX3N0YXR1cyc6IHtTOiAncGVuZGluZyd9XG4gICAgfVxuICB9O1xuICBcbiAgLy8gQ2FsbCBEeW5hbW9EQiB0byBhZGQgdGhlIGl0ZW0gdG8gdGhlIHRhYmxlXG4gIGxldCByZXN1bHQgPSBhd2FpdCBkeW5hbW8ucHV0SXRlbShwYXJhbXMpLnByb21pc2UoKS5jYXRjaCgoZXJyb3I6IGFueSkgPT4ge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gIH0pO1xuXG4gIGNvbnNvbGUubG9nKCdpbnNlcnRlZCBob3RlbCBib29raW5nOicpO1xuICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuXG4gIC8vIHJldHVybiBzdGF0dXMgb2Ygb2tcbiAgcmV0dXJuIHtcbiAgICBzdGF0dXM6IFwib2tcIixcbiAgICBib29raW5nX2lkOiBob3RlbEJvb2tpbmdJRFxuICB9XG59O1xuXG5mdW5jdGlvbiBoYXNoQ29kZShzOnN0cmluZykge1xuICBsZXQgaDphbnk7XG5cbiAgZm9yKGxldCBpID0gMDsgaSA8IHMubGVuZ3RoOyBpKyspe1xuICAgIGggPSBNYXRoLmltdWwoMzEsIGgpICsgcy5jaGFyQ29kZUF0KGkpIHwgMDtcbiAgfVxuXG4gIHJldHVybiAnJytNYXRoLmFicyhoKTtcbn0iXX0=