"use strict";
const AWS = require('aws-sdk');
const stepFunctions = new AWS.StepFunctions({
    region: 'us-east-1'
});
module.exports.handler = (event, context, callback) => {
    // [success, failFlights, failHotel, failRental]
    let runType = 'success';
    let tripID = "5c12d94a-ee6a-40d9-889b-1d49142248b7";
    if (null != event.queryStringParameters) {
        if (typeof event.queryStringParameters.runType != 'undefined') {
            runType = event.queryStringParameters.runType;
        }
        if (typeof event.queryStringParameters.tripID != 'undefined') {
            tripID = event.queryStringParameters.tripID;
        }
    }
    let input = {
        "trip_id": tripID,
        "depart": "London",
        "depart_at": "2021-07-10T06:00:00.000Z",
        "arrive": "Dublin",
        "arrive_at": "2021-07-12T08:00:00.000Z",
        "hotel": "holiday inn",
        "check_in": "2021-07-10T12:00:00.000Z",
        "check_out": "2021-07-12T14:00:00.000Z",
        "rental": "Volvo",
        "rental_from": "2021-07-10T00:00:00.000Z",
        "rental_to": "2021-07-12T00:00:00.000Z",
        "run_type": runType
    };
    const params = {
        stateMachineArn: process.env.statemachine_arn,
        input: JSON.stringify(input)
    };
    stepFunctions.startExecution(params, (err, data) => {
        if (err) {
            console.log(err);
            const response = {
                statusCode: 500,
                body: JSON.stringify({
                    message: 'There was an error'
                })
            };
            callback(null, response);
        }
        else {
            console.log(data);
            const response = {
                statusCode: 200,
                body: JSON.stringify({
                    message: 'The holiday booking system is processing your order'
                })
            };
            callback(null, response);
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FnYUxhbWJkYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNhZ2FMYW1iZGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUUvQixNQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUM7SUFDNUMsTUFBTSxFQUFFLFdBQVc7Q0FDbEIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxLQUFTLEVBQUUsT0FBVyxFQUFFLFFBQVksRUFBRSxFQUFFO0lBQzlELGdEQUFnRDtJQUNoRCxJQUFJLE9BQU8sR0FBRyxTQUFTLENBQUM7SUFDeEIsSUFBSSxNQUFNLEdBQUksc0NBQXNDLENBQUM7SUFFckQsSUFBRyxJQUFJLElBQUksS0FBSyxDQUFDLHFCQUFxQixFQUFDO1FBQ25DLElBQUcsT0FBTyxLQUFLLENBQUMscUJBQXFCLENBQUMsT0FBTyxJQUFJLFdBQVcsRUFBRTtZQUMxRCxPQUFPLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQztTQUNqRDtRQUVELElBQUcsT0FBTyxLQUFLLENBQUMscUJBQXFCLENBQUMsTUFBTSxJQUFJLFdBQVcsRUFBRTtZQUN6RCxNQUFNLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQztTQUMvQztLQUNKO0lBRUQsSUFBSSxLQUFLLEdBQUc7UUFDUixTQUFTLEVBQUUsTUFBTTtRQUNqQixRQUFRLEVBQUUsUUFBUTtRQUNsQixXQUFXLEVBQUUsMEJBQTBCO1FBQ3ZDLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLFdBQVcsRUFBRSwwQkFBMEI7UUFDdkMsT0FBTyxFQUFFLGFBQWE7UUFDdEIsVUFBVSxFQUFFLDBCQUEwQjtRQUN0QyxXQUFXLEVBQUUsMEJBQTBCO1FBQ3ZDLFFBQVEsRUFBRSxPQUFPO1FBQ2pCLGFBQWEsRUFBRSwwQkFBMEI7UUFDekMsV0FBVyxFQUFFLDBCQUEwQjtRQUN2QyxVQUFVLEVBQUUsT0FBTztLQUN0QixDQUFDO0lBRUYsTUFBTSxNQUFNLEdBQUc7UUFDWCxlQUFlLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0I7UUFDN0MsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0tBQy9CLENBQUM7SUFFRixhQUFhLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQU8sRUFBRSxJQUFRLEVBQUUsRUFBRTtRQUN2RCxJQUFJLEdBQUcsRUFBRTtZQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDakIsTUFBTSxRQUFRLEdBQUc7Z0JBQ2IsVUFBVSxFQUFFLEdBQUc7Z0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7b0JBQ3JCLE9BQU8sRUFBRSxvQkFBb0I7aUJBQzVCLENBQUM7YUFDTCxDQUFDO1lBQ0YsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztTQUM1QjthQUFNO1lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsQixNQUFNLFFBQVEsR0FBRztnQkFDYixVQUFVLEVBQUUsR0FBRztnQkFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztvQkFDakIsT0FBTyxFQUFFLHFEQUFxRDtpQkFDakUsQ0FBQzthQUNMLENBQUM7WUFDRixRQUFRLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzVCO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJyk7XG5cbmNvbnN0IHN0ZXBGdW5jdGlvbnMgPSBuZXcgQVdTLlN0ZXBGdW5jdGlvbnMoe1xucmVnaW9uOiAndXMtZWFzdC0xJ1xufSk7XG5cbm1vZHVsZS5leHBvcnRzLmhhbmRsZXIgPSAoZXZlbnQ6YW55LCBjb250ZXh0OmFueSwgY2FsbGJhY2s6YW55KSA9PiB7XG4gICAgLy8gW3N1Y2Nlc3MsIGZhaWxGbGlnaHRzLCBmYWlsSG90ZWwsIGZhaWxSZW50YWxdXG4gICAgbGV0IHJ1blR5cGUgPSAnc3VjY2Vzcyc7XG4gICAgbGV0IHRyaXBJRCA9ICBcIjVjMTJkOTRhLWVlNmEtNDBkOS04ODliLTFkNDkxNDIyNDhiN1wiO1xuICAgIFxuICAgIGlmKG51bGwgIT0gZXZlbnQucXVlcnlTdHJpbmdQYXJhbWV0ZXJzKXtcbiAgICAgICAgaWYodHlwZW9mIGV2ZW50LnF1ZXJ5U3RyaW5nUGFyYW1ldGVycy5ydW5UeXBlICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBydW5UeXBlID0gZXZlbnQucXVlcnlTdHJpbmdQYXJhbWV0ZXJzLnJ1blR5cGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZih0eXBlb2YgZXZlbnQucXVlcnlTdHJpbmdQYXJhbWV0ZXJzLnRyaXBJRCAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdHJpcElEID0gZXZlbnQucXVlcnlTdHJpbmdQYXJhbWV0ZXJzLnRyaXBJRDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxldCBpbnB1dCA9IHtcbiAgICAgICAgXCJ0cmlwX2lkXCI6IHRyaXBJRCxcbiAgICAgICAgXCJkZXBhcnRcIjogXCJMb25kb25cIixcbiAgICAgICAgXCJkZXBhcnRfYXRcIjogXCIyMDIxLTA3LTEwVDA2OjAwOjAwLjAwMFpcIixcbiAgICAgICAgXCJhcnJpdmVcIjogXCJEdWJsaW5cIixcbiAgICAgICAgXCJhcnJpdmVfYXRcIjogXCIyMDIxLTA3LTEyVDA4OjAwOjAwLjAwMFpcIixcbiAgICAgICAgXCJob3RlbFwiOiBcImhvbGlkYXkgaW5uXCIsXG4gICAgICAgIFwiY2hlY2tfaW5cIjogXCIyMDIxLTA3LTEwVDEyOjAwOjAwLjAwMFpcIixcbiAgICAgICAgXCJjaGVja19vdXRcIjogXCIyMDIxLTA3LTEyVDE0OjAwOjAwLjAwMFpcIixcbiAgICAgICAgXCJyZW50YWxcIjogXCJWb2x2b1wiLFxuICAgICAgICBcInJlbnRhbF9mcm9tXCI6IFwiMjAyMS0wNy0xMFQwMDowMDowMC4wMDBaXCIsXG4gICAgICAgIFwicmVudGFsX3RvXCI6IFwiMjAyMS0wNy0xMlQwMDowMDowMC4wMDBaXCIsXG4gICAgICAgIFwicnVuX3R5cGVcIjogcnVuVHlwZVxuICAgIH07XG4gICAgXG4gICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICBzdGF0ZU1hY2hpbmVBcm46IHByb2Nlc3MuZW52LnN0YXRlbWFjaGluZV9hcm4sXG4gICAgICAgIGlucHV0OiBKU09OLnN0cmluZ2lmeShpbnB1dClcbiAgICB9O1xuICAgIFxuICAgIHN0ZXBGdW5jdGlvbnMuc3RhcnRFeGVjdXRpb24ocGFyYW1zLCAoZXJyOmFueSwgZGF0YTphbnkpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAgICAgICAgIHN0YXR1c0NvZGU6IDUwMCxcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1RoZXJlIHdhcyBhbiBlcnJvcidcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3BvbnNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1RoZSBob2xpZGF5IGJvb2tpbmcgc3lzdGVtIGlzIHByb2Nlc3NpbmcgeW91ciBvcmRlcidcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTsiXX0=